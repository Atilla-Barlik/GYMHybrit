@page "/DailyNutritionList"

<h3>DailyNutrition</h3>


@if(dailyNutritionDetailsList?.Count == 0)
{
    <p>Liste Boş</p>
}
else
{
    <p>Liste</p>

        @if(dailyNutritionDetailsList != null)
    {
       
        <div class="container mt-4">
            @foreach (var meal in fixedMealTimes)
            {
                <div class="card mb-4">
                      <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>@GetMealName(meal.MealId)</h5>
                        <button class="btn btn-success btn-sm" @onclick="() => SelectMealTime(meal.MealId)">+</button>
                    </div>
                    <div class="card-body">
                        @if (mealTimes.ContainsKey(meal.MealId) && mealTimes[meal.MealId].Any())
                        {
                            <ul class="list-group">
                                @foreach (var nutrient in mealTimes[meal.MealId])
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <img src="@nutrient.NutrientImage" alt="@nutrient.NutrientName" class="rounded" width="75" height="75" />
                                            <div class="ms-3">
                                                <strong>@nutrient.NutrientName</strong>
                                                <p class="mb-0">Kalori: @nutrient.NutrientKcal | Karbonhidrat: @nutrient.NutrientCarbohydrate g | Protein: @nutrient.NutrientProtein g | Yağ: @nutrient.NutrientFat g</p>
                                            </div>
                                        </div>
                                        <button class="btn btn-danger btn-lg" @onclick="() => DeleteNutrient(nutrient)">Sil</button>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>Bu öğünde henüz besin eklenmemiş.</p>
                        }
                    </div>
                </div>
            }
        </div>
        
    }
}
@code {

    [Inject] NavigationManager Navigation { get; set; }
    [Inject] IDailyNutritionService dailyNutritionService { get; set; }
    [Inject] IDailyNutritionDetailsService dailyNutritionDetailsService { get; set; }
    [Inject] MealTimeService mealTimeService { get; set; }
    public int AppUserId { get; set; } = 1; // Assuming user ID is set or fetched from authentication.
    string name { get; set; }
    public DailyNutritionResponseModel? daily;
    public List<DailyNutritionDetailsResponseModel>? dailyNutritionDetailsList;
    bool deneme;
    int dailyNutritionId = 0;
    [Inject] IDailyNutritionService DailyNutritionService { get; set; }
    private Dictionary<int, List<DailyNutritionDetailsResponseModel>> mealTimes = new Dictionary<int, List<DailyNutritionDetailsResponseModel>>();
    private async Task DeleteNutrient(DailyNutritionDetailsResponseModel id)
    {
        if (id != null)
        {
            //dailyNutritionDetailsList.Remove(id);
            foreach (var meal in mealTimes)
            {
                meal.Value.RemoveAll(n => n.DailyNutritionDetailsId == id.DailyNutritionDetailsId);
            }
            await dailyNutritionDetailsService.DeleteDailyNutrition(id);
        }
        else
            return;
    }
    private void SelectMealTime(int mealId)
    {
        // mealId'yi global olarak kaydediyoruz.
        mealTimeService.SetMealId(mealId);
        Navigation.NavigateTo("/NutritionSearch"); // /NutritionSearch sayfasına yönlendiriyoruz.
    }
    protected override async Task OnInitializedAsync()
    {
        DateTime dateTime = DateTime.Now;
        DateOnly date = DateOnly.FromDateTime(dateTime);

        dailyNutritionId = await dailyNutritionService.GetDailyNutritionCheck(1, date);

        if (dailyNutritionId == 0)
        {
            AddUpdateDailyNutritionRequest a1 = new AddUpdateDailyNutritionRequest
                {
                    AppUserId = 1,
                    DailyNutritionStatus = true,
                    DailyNutritionTotalCarbohydrate = 0,
                    DailyNutritionTotalFat = 0,
                    DailyNutritionTotalKcal = 0,
                    DailyNutritionTotalProtein = 0,
                    Date = date
                };

            var existingEntry = await dailyNutritionService.AddDailyNutrition(a1);

            if (existingEntry != null)
            {
                // Redirect to the page listing their daily nutrition
                Navigation.NavigateTo("/NutritionSearch");
                return;
            }
        }
        else
        {
            dailyNutritionDetailsList = await dailyNutritionDetailsService.GetAllDailyNutritiontList();
            mealTimes = dailyNutritionDetailsList
            .GroupBy(n => n.DailyMealTime)
            .ToDictionary(g => g.Key, g => g.ToList());

            return;
        }
       //dailyNutritionDetailsList = await dailyNutritionDetailsService.GetAllDailyNutritiontList();
    }

    private async Task CalculateAndSaveTotals()
    {
        // `DailyNutritionDetails` tablosundaki verileri topluyoruz
        var totalKcal = dailyNutritionDetailsList.Sum(d => d.NutrientKcal);
        var totalCarbs = dailyNutritionDetailsList.Sum(d => d.NutrientCarbohydrate);
        var totalProtein = dailyNutritionDetailsList.Sum(d => d.NutrientProtein);
        var totalFat = dailyNutritionDetailsList.Sum(d => d.NutrientFat);
        DateTime dateTime = DateTime.Now;

        DateOnly date = DateOnly.FromDateTime(dateTime);
        // Yeni bir `DailyNutrition` nesnesi oluşturuyoruz ve topladığımız verileri atıyoruz
        var daily = new DailyNutritionResponseModel
            {

                DailyNutritionID = DailyNutritionService.dailyNutrition.DailyNutritionID,
                DailyNutritionTotalKcal = totalKcal,
                DailyNutritionTotalCarbohydrate = totalCarbs,
                DailyNutritionTotalProtein = totalProtein,
                DailyNutritionTotalFat = totalFat,
                Date = date,
                DailyNutritionStatus = true,
                AppUserId = 1 // currentUserId'yi kullanıcıya göre ayarlayın
            };

        // API'ye kayıt işlemi yapıyoruz
        await dailyNutritionService.UpdateDailyNutrition(daily, DailyNutritionService.dailyNutrition.DailyNutritionID);

        // Başarılı bir şekilde kayıt yaptıktan sonra, kullanıcıyı listeleme sayfasına yönlendirebiliriz
        //NavigationManager.NavigateTo("/daily-nutrition-list");
    }

    private string GetMealName(int mealId)
    {
        return mealId switch
        {
            0 => "Sabah Öğünü",
            1 => "Öğle Öğünü",
            2 => "Akşam Öğünü",
            3 => "Ara Öğün 1",
            4 => "Ara Öğün 2",
            _ => "Bilinmeyen Öğün"
        };
    }

    public class MealModel
    {
        public int MealId { get; set; }
        public string MealName { get; set; }
    }

    private List<MealModel> fixedMealTimes = new List<MealModel>
    {
        new MealModel { MealId = 0, MealName = "Sabah Öğünü" },
        new MealModel { MealId = 1, MealName = "Öğle Öğünü" },
        new MealModel { MealId = 2, MealName = "Akşam Öğünü" },
        new MealModel { MealId = 3, MealName = "Ara Öğün 1" },
        new MealModel { MealId = 4, MealName = "Ara Öğün 2" }
    };
}

    

