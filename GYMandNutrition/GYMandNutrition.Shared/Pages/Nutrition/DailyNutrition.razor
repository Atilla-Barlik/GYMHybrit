@page "/DailyNutritionList"

@* <h3>DailyNutrition</h3>


@if(dailyNutritionDetailsList?.Count == 0)
{
    <p>Liste Boş</p>
}
else
{
    <p>Liste</p>

        @if(dailyNutritionDetailsList != null)
    {

        <div class="container mt-4">
            @foreach (var meal in fixedMealTimes)
            {
                <div class="card mb-4">
                      <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>@GetMealName(meal.MealId)</h5>
                        <button class="btn btn-success btn-sm" @onclick="() => SelectMealTime(meal.MealId)">+</button>
                    </div>
                    <div class="card-body">
                        @if (mealTimes.ContainsKey(meal.MealId) && mealTimes[meal.MealId].Any())
                        {
                            <ul class="list-group">
                                @foreach (var nutrient in mealTimes[meal.MealId])
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <img src="@nutrient.NutrientImage" alt="@nutrient.NutrientName" class="rounded" width="75" height="75" />
                                            <div class="ms-3">
                                                <strong>@nutrient.NutrientName</strong>
                                                <p class="mb-0">Kalori: @nutrient.NutrientKcal | Karbonhidrat: @nutrient.NutrientCarbohydrate g | Protein: @nutrient.NutrientProtein g | Yağ: @nutrient.NutrientFat g</p>
                                            </div>
                                        </div>
                                        <button class="btn btn-danger btn-lg" @onclick="() => DeleteNutrient(nutrient)">Sil</button>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>Bu öğünde henüz besin eklenmemiş.</p>
                        }
                    </div>
                </div>
            }
        </div>

    }
}
@code {

    [Inject] NavigationManager Navigation { get; set; }
    [Inject] IDailyNutritionService dailyNutritionService { get; set; }
    [Inject] IDailyNutritionDetailsService dailyNutritionDetailsService { get; set; }
    [Inject] MealTimeService mealTimeService { get; set; }
    public int AppUserId { get; set; } = 1; // Assuming user ID is set or fetched from authentication.
    string name { get; set; }
    public DailyNutritionResponseModel? daily;
    public List<DailyNutritionDetailsResponseModel>? dailyNutritionDetailsList;
    bool deneme;
    int dailyNutritionId = 0;
    [Inject] IDailyNutritionService DailyNutritionService { get; set; }
    private Dictionary<int, List<DailyNutritionDetailsResponseModel>> mealTimes = new Dictionary<int, List<DailyNutritionDetailsResponseModel>>();
    private async Task DeleteNutrient(DailyNutritionDetailsResponseModel id)
    {
        if (id != null)
        {
            //dailyNutritionDetailsList.Remove(id);
            foreach (var meal in mealTimes)
            {
                meal.Value.RemoveAll(n => n.DailyNutritionDetailsId == id.DailyNutritionDetailsId);
            }
            await dailyNutritionDetailsService.DeleteDailyNutrition(id);
        }
        else
            return;
    }
    private void SelectMealTime(int mealId)
    {
        // mealId'yi global olarak kaydediyoruz.
        mealTimeService.SetMealId(mealId);
        Navigation.NavigateTo("/NutritionSearch"); // /NutritionSearch sayfasına yönlendiriyoruz.
    }
    protected override async Task OnInitializedAsync()
    {
        DateTime dateTime = DateTime.Now;
        DateOnly date = DateOnly.FromDateTime(dateTime);

        dailyNutritionId = await dailyNutritionService.GetDailyNutritionCheck(1);

        if (dailyNutritionId == 0)
        {
            AddUpdateDailyNutritionRequest a1 = new AddUpdateDailyNutritionRequest
                {
                    AppUserId = 1,
                    DailyNutritionStatus = true,
                    DailyNutritionTotalCarbohydrate = 0,
                    DailyNutritionTotalFat = 0,
                    DailyNutritionTotalKcal = 0,
                    DailyNutritionTotalProtein = 0,
                    Date = date
                };

            var existingEntry = await dailyNutritionService.AddDailyNutrition(a1);

            if (existingEntry != null)
            {
                // Redirect to the page listing their daily nutrition
                Navigation.NavigateTo("/NutritionSearch");
                return;
            }
        }
        else
        {
            dailyNutritionDetailsList = await dailyNutritionDetailsService.GetAllDailyNutritiontList();
            mealTimes = dailyNutritionDetailsList
            .GroupBy(n => n.DailyMealTime)
            .ToDictionary(g => g.Key, g => g.ToList());

            return;
        }
       //dailyNutritionDetailsList = await dailyNutritionDetailsService.GetAllDailyNutritiontList();
    }

    private async Task CalculateAndSaveTotals()
    {
        // `DailyNutritionDetails` tablosundaki verileri topluyoruz
        var totalKcal = dailyNutritionDetailsList.Sum(d => d.NutrientKcal);
        var totalCarbs = dailyNutritionDetailsList.Sum(d => d.NutrientCarbohydrate);
        var totalProtein = dailyNutritionDetailsList.Sum(d => d.NutrientProtein);
        var totalFat = dailyNutritionDetailsList.Sum(d => d.NutrientFat);
        DateTime dateTime = DateTime.Now;

        DateOnly date = DateOnly.FromDateTime(dateTime);
        // Yeni bir `DailyNutrition` nesnesi oluşturuyoruz ve topladığımız verileri atıyoruz
        var daily = new DailyNutritionResponseModel
            {

                DailyNutritionID = DailyNutritionService.dailyNutrition.DailyNutritionID,
                DailyNutritionTotalKcal = totalKcal,
                DailyNutritionTotalCarbohydrate = totalCarbs,
                DailyNutritionTotalProtein = totalProtein,
                DailyNutritionTotalFat = totalFat,
                Date = date,
                DailyNutritionStatus = true,
                AppUserId = 1 // currentUserId'yi kullanıcıya göre ayarlayın
            };

        // API'ye kayıt işlemi yapıyoruz
        await dailyNutritionService.UpdateDailyNutrition(daily, DailyNutritionService.dailyNutrition.DailyNutritionID);

        // Başarılı bir şekilde kayıt yaptıktan sonra, kullanıcıyı listeleme sayfasına yönlendirebiliriz
        //NavigationManager.NavigateTo("/daily-nutrition-list");
    }

    private string GetMealName(int mealId)
    {
        return mealId switch
        {
            0 => "Sabah Öğünü",
            1 => "Öğle Öğünü",
            2 => "Akşam Öğünü",
            3 => "Ara Öğün 1",
            4 => "Ara Öğün 2",
            _ => "Bilinmeyen Öğün"
        };
    }

    public class MealModel
    {
        public int MealId { get; set; }
        public string MealName { get; set; }
    }

    private List<MealModel> fixedMealTimes = new List<MealModel>
    {
        new MealModel { MealId = 0, MealName = "Sabah Öğünü" },
        new MealModel { MealId = 1, MealName = "Öğle Öğünü" },
        new MealModel { MealId = 2, MealName = "Akşam Öğünü" },
        new MealModel { MealId = 3, MealName = "Ara Öğün 1" },
        new MealModel { MealId = 4, MealName = "Ara Öğün 2" }
    };
} *@




@using Entities.DailyNutritionEntities
@inject IDailyNutritionDetailsService DailyNutritionDetailsService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject MealTimeService MealTimeService
@using MudBlazor.Services
@inject IDialogService DialogService

<h3 class="d-flex justify-content-between align-items-center mt-4">
    Günlük Besin Listeleri
    <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="SaveDailyNutrientDialog">
        <MudIcon Icon="@Icons.Material.Filled.Save" class="me-1" /> Kaydet ve Kapat
    </MudButton>
</h3>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    @foreach (var group in mealGroupList)
    {
        <MudPaper Class="p-3 mb-4 fade-in">
            <MudStack Direction="Row" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h6">Liste @(group.MealTime+1)</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="() => AddNewItemToMeal(group.MealTime)" />
            </MudStack>

            @if (group.Items != null && group.Items.Any())
            {
                <MudList T="object" Dense="true">
                    @foreach (var item in group.Items)
                    {
                        <MudCard Class="nutrient-card my-2">
                            <MudCardContent>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <MudImage Src="@item.NutrientImage"
                                        Class="rounded-circle me-3"
                                        Alt="@item.NutrientName"
                                        Width="50" Height="50"
                                        Elevation="25" />
                                        <div>
                                            <MudText Typo="Typo.subtitle1" Class="fw-bold">@item.NutrientName</MudText>
                                            <MudText Typo="Typo.body2" Class="text-muted">Kalori: @item.NutrientKcal kcal</MudText>
                                            <MudText Typo="Typo.caption">
                                                Karbonhidrat: @item.NutrientCarbohydrate g |
                                                Protein: @item.NutrientProtein g |
                                                Yağ: @item.NutrientFat g
                                            </MudText>
                                        </div>
                                    </div>

                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                    Color="Color.Error"
                                    OnClick="() => DeleteNutrient(item)" />
                                </div>
                            </MudCardContent>
                        </MudCard>
                    }
                </MudList>
            }
            else
            {
                <MudText Class="text-muted mt-2">Bu öğünde henüz besin eklenmemiş.</MudText>
            }
        </MudPaper>
    }
</MudContainer>

@code {
    private Dictionary<int, List<DailyNutritionDetailsResponseModel>> dailyNutritionGroups = new();
    private DailyNutritionResponseModel dailyNutrition;
    private const int MaxGroups = 10;
    [Inject] IDailyNutritionService dailyNutritionService { get; set; }
    int dailyNutritionId = 0;
    private const int MaxListCount = 10;
    private List<MealGroup> mealGroupList = new();
    protected override async Task OnInitializedAsync()
    {
        DateOnly today = DateOnly.FromDateTime(DateTime.Now);
        dailyNutritionId = await dailyNutritionService.GetDailyNutritionCheck(1);

       
        // Günlük kayıt yoksa oluştur
        if (dailyNutritionId == 0)
        {
            var newNutrition = new AddUpdateDailyNutritionRequest
                {
                    AppUserId = 1,
                    DailyNutritionStatus = true,
                    DailyNutritionTotalCarbohydrate = 0,
                    DailyNutritionTotalFat = 0,
                    DailyNutritionTotalKcal = 0,
                    DailyNutritionTotalProtein = 0,
                    Date = today
                };

            var result = await dailyNutritionService.AddDailyNutrition(newNutrition);
            if (result != null)
            {
                Navigation.NavigateTo("/NutritionSearch");
                return;
            }
        }

        // Kayıt varsa detayları getir
        var details = await DailyNutritionDetailsService.GetAllDailyNutritiontList();

        if (details != null && details.Any())
        {
            dailyNutritionGroups = details
                .GroupBy(d => d.DailyMealTime)
                .ToDictionary(g => g.Key, g => g.ToList());
        }
        else
        {
            dailyNutritionGroups.Clear();
        }
         dailyNutrition = await dailyNutritionService.GetDailyNutritionById(dailyNutritionService.dailyNutrition.DailyNutritionID);

        ConvertGroupsToList();
        StateHasChanged();
    }
    int nextMealTime;
    private void AddNewItemToMeal(int mealTime)
    {
        if (dailyNutritionGroups.Count >= MaxGroups)
        {
            Snackbar.Add("Maksimum 10 adet öğün listesine ulaşılmıştır!", Severity.Warning);
            return;
        }
        if (dailyNutritionGroups.Count == 0)
            nextMealTime = 1;
        else
        {
            nextMealTime = dailyNutritionGroups.Keys.Max() + 1;
            if (!dailyNutritionGroups.ContainsKey(nextMealTime))
                dailyNutritionGroups[nextMealTime] = new();
        }


        MealTimeService.SetMealId(mealTime);
        Navigation.NavigateTo("/NutritionSearch");
    }

    private async Task DeleteNutrient(DailyNutritionDetailsResponseModel model)
    {
        var success = await DailyNutritionDetailsService.DeleteDailyNutrition(model);

        if (success)
        {
            // Yerel listeden öğeyi sil
            var targetGroup = mealGroupList.FirstOrDefault(g => g.MealTime == model.DailyMealTime);
            if (targetGroup != null)
            {
                targetGroup.Items.RemoveAll(x => x.DailyNutritionDetailsId == model.DailyNutritionDetailsId);

                Snackbar.Add("Besin başarıyla silindi.", Severity.Success);
                StateHasChanged();
            }
        }
        else
        {
            Snackbar.Add("Besin silinirken bir hata oluştu.", Severity.Error);
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            var list = await DailyNutritionDetailsService.GetAllDailyNutritiontList();
            dailyNutritionGroups = list
                .GroupBy(x => x.DailyMealTime)
                .ToDictionary(g => g.Key, g => g.ToList());

            StateHasChanged();
        }
    }

    private void EnsureEmptyListSlot()
    {
        if (dailyNutritionGroups.Count >= MaxGroups)
            return;

        int nextKey = dailyNutritionGroups.Any() ? dailyNutritionGroups.Keys.Max() + 1 : 0;

        if (!dailyNutritionGroups.ContainsKey(nextKey))
        {
            dailyNutritionGroups[nextKey] = new List<DailyNutritionDetailsResponseModel>();
        }
    }
    public class MealGroup
    {
        public int MealTime { get; set; }
        public List<DailyNutritionDetailsResponseModel> Items { get; set; } = new();
    }
    private void ConvertGroupsToList()
    {
        mealGroupList = dailyNutritionGroups
            .OrderBy(g => g.Key)
            .Select(g => new MealGroup
                {
                    MealTime = g.Key,
                    Items = g.Value
                }).ToList();

        // Her zaman boş bir slotu en alta ekle
        if (mealGroupList.Count < MaxGroups)
        {
            int next = mealGroupList.Any() ? mealGroupList.Max(x => x.MealTime) + 1 : 0;
            if (!mealGroupList.Any(x => x.MealTime == next))
            {
                mealGroupList.Add(new MealGroup { MealTime = next });
            }
        }
    }

    private async Task SaveDailyNutrientDialog()
    {
        if(dailyNutrition.DailyNutritionStatus !=false)
        {
            var yes = await DialogService.ShowMessageBox(
            "Günlük Listeni Kaydet",
            "Günlük besin listesini kaydetmek ve kapatmak istediğine emin misin?",
            yesText: "Evet", noText: "Hayır");
            if (yes == true)
            {
                var res = await dailyNutritionService.AggregateAndCloseAsync(dailyNutritionService.dailyNutrition.DailyNutritionID);
                if (res) Snackbar.Add("Başarıyla kaydedildi.", Severity.Success);
                else Snackbar.Add("Kayıt hatası.", Severity.Error);
                Navigation.NavigateTo("/DailyNutritionList");
            }
        }
        else
        {
            Snackbar.Add("Günlük Kaydınız Gerçekleştirilmiş.", Severity.Error);
        }

    }
}

<style>
    .nutrient-card {
        background-color: #f5f5f5;
        border-radius: 12px;
        animation: fadeIn 0.6s ease-in-out;
        margin-bottom: 10px;
        width: 100%;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .nutrient-image {
        border-radius: 20%;
        width: 50px;
        height: 50px;
        object-fit: cover;
        margin-right: 12px;
        
    }

    .nutrient-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
    }

    .nutrient-info {
        display: flex;
        align-items: center;
        flex: 1;
        min-width: 250px;
    }

    .nutrient-values {
        display: flex;
        flex-direction: column;
    }

    @@media (max-width: 768px) {
        .nutrient-info

    {
        flex-direction: column;
        align-items: flex-start;
    }

    .nutrient-image {
        margin-bottom: 8px;
    }

    .nutrient-values {
        font-size: 0.9rem;
    }

    }

    .nutrient-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }
</style>