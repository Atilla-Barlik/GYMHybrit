@page "/weather"

@* <PageTitle>Hesaplayıcı</PageTitle>



<div class="calculator-container">

    <p>
        The Calorie Calculator can be used to estimate the calories you need to consume each day.
        This calculator can also provide some simple guidelines if you want to gain or lose weight.
        This calculator uses the Revised Harris-Benedict equation to calculate your calorie needs.
    </p>

    <div class="calculator">
        <div class="settings">
            <div class="input-group">
                <label>Units:</label>
                <input type="radio" id="metric" name="units" value="metric" @onchange="e => Units = e.Value.ToString()" checked>
                <label for="metric">Metric</label>
                <input type="radio" id="imperial" name="units" value="imperial" @onchange="e => Units = e.Value.ToString()">
                <label for="imperial">Imperial</label>
            </div>
            <div class="input-group">
                <label>Sex:</label>
                <input type="radio" id="male" name="sex" value="male" @onchange="e => Sex = e.Value.ToString()" checked>
                <label for="male">Male</label>
                <input type="radio" id="female" name="sex" value="female" @onchange="e => Sex = e.Value.ToString()">
                <label for="female">Female</label>
            </div>
        </div>

        <div class="inputs">
            <div class="circular-input" id="age-circle">
                <label>Age</label>
                <input type="range" min="1" max="100" id="age" @bind="Age" oninput="updateCircle('age-circle', this.value)">
                <div class="circular-input-content">
                    <span id="age-value">25</span>
                    <p>Years</p>
                </div>
            </div>
            <div class="circular-input" id="weight-circle">
                <label>Weight</label>
                <input type="range" min="30" max="200" tabindex="" @bind="Weight" oninput="updateCircle('weight-circle', this.value)">
                <div class="circular-input-content">
                    <span id="weight-value">70</span>
                    <p>KG</p>
                </div>
            </div>
            <div class="circular-input" id="height-circle">
                <label>Height</label>
                <input type="range" min="100" max="220" @bind="Height" id="height" oninput="updateCircle('height-circle', this.value)">
                <div class="circular-input-content">
                    <span id="height-value">170</span>
                    <p>CM</p>
                </div>
            </div>
        </div>
        <br /><br />
        <div class="dropdowns">
            <select>
                <option value="little">Little to no exercise</option>
                <!-- Diğer seçenekler buraya eklenecek -->
            </select>
            <select>
                <option value="maintain">Stay the Same Weight</option>
                <!-- Diğer seçenekler buraya eklenecek -->
            </select>
        </div>

        <div class="result">
            <p>You would have to consume: <span>@CalculateCalories()</span></p>
        </div>
    </div>
</div>

<script>
    function updateCircle(circleId, value) {
        document.getElementById(circleId).querySelector('span').textContent = value;
        temp = value;
    }
</script>



@code {
    private string Units { get; set; } = "metric";
    private string Sex { get; set; } = "male";
    private int Age { get; set; } = 25;
    private int Weight { get; set; } = 70;
    private int Height { get; set; } = 170;
    private string ExerciseLevel { get; set; } = "little";
    private string WeightGoal { get; set; } = "maintain";

    private int CalculateCalories()
    {
        // Kalori hesaplama algoritması buraya gelecek.
        // Örnek olarak basit bir hesaplama yapılacak.
        int baseCalories = (Weight * 10) + (Height * 6) - (Age * 5);
        int exerciseModifier = ExerciseLevel switch
        {
            "little" => 200,
            "light" => 400,
            "moderate" => 600,
            "intense" => 800,
            _ => 0
        };

        return baseCalories + exerciseModifier;
    }
} *@

@* @inject IDailyMacroService dailyMacroService
@inject ISnackbar snackbar
@using Entities.DailyMacroEntities
@using MudBlazor

<PageTitle>Günlük Kalori ve Makro Hesabı</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-5">
    <MudPaper Elevation="4" Class="p-6">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Günlük Kalori ve Makro Hesabı</MudText>
        <MudText Typo="Typo.subtitle1" Align="Align.Center">Bu hesaplama, günlük kalori, protein, yağ ve karbonhidrat ihtiyacınızı Harris-Benedict denklemine göre tahmin eder.</MudText>

        <MudDivider Class="my-4" />

        <MudRadioGroup  @bind-Value="Sex" Label="Sex"  Orientation="Orientation.Horizontal" Class="mb-4">
            <MudRadio  Value="@("male")" Label="Erkek" />
            <MudRadio Value="@("female")" Label="Kadın" />
        </MudRadioGroup>

        <MudGrid Class="mb-4">
            <MudItem xs="12" sm="4">
                <MudNumericField @bind-Value="Age" HideSpinButtons="false" Label="Yaş" Min="10" Max="100" Variant="Variant.Filled" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudNumericField @bind-Value="Weight" Label="Kilo (kg)" Min="30" Max="200" Variant="Variant.Filled" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudNumericField @bind-Value="Height" Label="Boy (cm)" Min="100" Max="250" Variant="Variant.Filled" />
            </MudItem>
        </MudGrid>

        <MudGrid Class="mb-4">
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="ActivityFactor" Label="Egzersiz Seviyesi" Variant="Variant.Filled">
                    <MudSelectItem Value="1.2">Egzersiz Yapmıyorum</MudSelectItem>
                    <MudSelectItem Value="1.3">Hafif Egzersiz</MudSelectItem>
                    <MudSelectItem Value="1.4">Orta Egzersiz</MudSelectItem>
                    <MudSelectItem Value="1.5">Ağır Egzersiz</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="CarbPercent" Label="Karbonhidrat %" Variant="Variant.Filled">
                    <MudSelectItem Value="0.45">45%</MudSelectItem>
                    <MudSelectItem Value="0.55">55%</MudSelectItem>
                    <MudSelectItem Value="0.60">60%</MudSelectItem>
                    <MudSelectItem Value="0.65">65%</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CalculateNutrition" Class="my-4" FullWidth="true">HESAPLA</MudButton>

        @if (Calculated)
        {
            <MudPaper Class="pa-4 mt-4" Elevation="2">
                <MudText Typo="Typo.h6" Class="mb-2">Sonuç:</MudText>
                <MudList T="string" Dense="true">
                    <MudListItem >Günlük Kalori İhtiyacı: <strong>@Calories kcal</strong></MudListItem>
                    <MudListItem>Protein İhtiyacı: <strong>@Protein gr</strong></MudListItem>
                    <MudListItem>Yağ İhtiyacı: <strong>@Fat gr</strong></MudListItem>
                    <MudListItem>Karbonhidrat İhtiyacı: <strong>@Carbohydrate gr</strong></MudListItem>
                </MudList>
                <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="SaveNutrition" Class="mt-4">Sonucu Kaydet</MudButton>
            </MudPaper>


        }

    </MudPaper>
</MudContainer>

@code {

    private string Sex { get; set; }
    private int Age { get; set; } = 25;
    private double Weight { get; set; } = 70;
    private double Height { get; set; } = 170;
    private double ActivityFactor { get; set; } = 1.2;
    private double CarbPercent { get; set; } = 0.55;

    private bool Calculated = false;
    private decimal Calories;
    private decimal Protein;
    private decimal Fat;
    private decimal Carbohydrate;

    private void CalculateNutrition()
    {
        double BEE;
        if(Sex == "male")
        {
            BEE = 66.5 + (13.8 * Weight) + (5.0 * Height) - (6.8 * Age);
        }
        else
        {
            BEE = 655.1 + (9.6 * Weight) + (1.9 * Height) - (4.7 * Age);
        }

        Calories = (decimal) Math.Round(BEE * ActivityFactor, 0);
        Protein = (decimal) Math.Round(Weight * 0.9, 1); // Ortalama protein
        Fat = (decimal)Math.Round(((decimal)Calories * (decimal)0.30) / 9, 1);
        Carbohydrate = (decimal)Math.Round(((decimal)Calories * (decimal)CarbPercent) / 4, 1);

        Calculated = true;
    }

    private async Task SaveNutrition()
    {
        var macroRequest = new AddUpdateDailyMacroRequest
        {
            Calories = Calories,
            Proteins = Protein,
            Fats = Fat,
            Carbohydrates = Carbohydrate,
            AppUserId = 1
        };

        var result = await dailyMacroService.AddDailyMacro(macroRequest);

        if (result)
        {
            snackbar.Add("Macro başarıyla kaydedildi!", Severity.Success);
        }
        else
        {
            snackbar.Add("Kayıt sırasında bir hata oluştu!", Severity.Error);   
        }
    }
} *@


            @page "/nutrition-calculator"
@inject IDailyMacroService dailyMacroService
@inject ISnackbar Snackbar
@using MudBlazor
@using Entities.DailyMacroEntities
@inject LocalAuthStateProvider user
<PageTitle>Günlük Kalori ve Makro</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">

  <!-- Toggle Butonları -->
  <MudButtonGroup Exclusive="true" Color="Color.Primary" Class="mb-4">
    <MudButton 
      Variant="@(viewMode == ViewMode.Auto ? Variant.Filled : Variant.Outlined)" 
      OnClick="() => viewMode = ViewMode.Auto">
      Otomatik Hesaplama
    </MudButton>
    <MudButton 
      Variant="@(viewMode == ViewMode.Custom ? Variant.Filled : Variant.Outlined)" 
      OnClick="() => viewMode = ViewMode.Custom">
      Özel Makro
    </MudButton>
  </MudButtonGroup>

  <!-- Otomatik Hesaplama Paneli -->
  @if (viewMode == ViewMode.Auto)
  {
    <MudPaper Elevation="4" Class="p-6 mb-4">
      <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-3">Otomatik Hesaplama</MudText>
      <MudRadioGroup @bind-Value="Sex" Label="Cinsiyet" Orientation="Orientation.Horizontal" Class="mb-4">
                <MudRadio Value="@("male")" Label="Erkek" />
                <MudRadio Value="@("female")" Label="Kadın" />
      </MudRadioGroup>

      <MudGrid Class="mb-4">
        <MudItem xs="12" sm="4">
          <MudNumericField @bind-Value="Age" Label="Yaş" Min="10" Max="100" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="12" sm="4">
          <MudNumericField @bind-Value="Weight" Label="Kilo (kg)" Min="30" Max="200" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="12" sm="4">
          <MudNumericField @bind-Value="Height" Label="Boy (cm)" Min="100" Max="250" Variant="Variant.Filled" />
        </MudItem>
      </MudGrid>

      <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6">
          <MudSelect @bind-Value="ActivityFactor" Label="Egzersiz Seviyesi" Variant="Variant.Filled">
            <MudSelectItem Value="1.2">Egzersiz Yapmıyorum</MudSelectItem>
            <MudSelectItem Value="1.3">Hafif</MudSelectItem>
            <MudSelectItem Value="1.4">Orta</MudSelectItem>
            <MudSelectItem Value="1.5">Ağır</MudSelectItem>
          </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6">
          <MudSelect @bind-Value="CarbPercent" Label="Karbonhidrat %" Variant="Variant.Filled">
            <MudSelectItem Value="0.45">45%</MudSelectItem>
            <MudSelectItem Value="0.55">55%</MudSelectItem>
            <MudSelectItem Value="0.60">60%</MudSelectItem>
            <MudSelectItem Value="0.65">65%</MudSelectItem>
          </MudSelect>
        </MudItem>
      </MudGrid>

      <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CalculateNutrition" FullWidth="true">
        HESAPLA
      </MudButton>

      @if (Calculated)
      {
        <MudPaper Class="pa-4 mt-4" Elevation="2">
          <MudText Typo="Typo.subtitle1" Class="mb-2">Sonuçlar</MudText>
          <MudList T="decimal" Dense="true">
            <MudListItem>Kalori: <b>@Calories kcal</b></MudListItem>
            <MudListItem>Protein: <b>@Protein g</b></MudListItem>
            <MudListItem>Yağ: <b>@Fat g</b></MudListItem>
            <MudListItem>Karbonhidrat: <b>@Carbohydrate g</b></MudListItem>
          </MudList>
                    @if (user.CurrentUserId > 0)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="SaveNutrition" Class="mt-3">
                            Kaydet
                        </MudButton>
                    }
        </MudPaper>
      }
    </MudPaper>
  }

  <!-- Özel Makro Paneli -->
  @if (viewMode == ViewMode.Custom)
  {
    <MudPaper Elevation="4" Class="p-6">
      <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-3">Özel Makro Girişi</MudText>
      <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6">
          <MudNumericField @bind-Value="CustomCalories" Label="Kalori (kcal)" Min="0" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="12" sm="6">
          <MudNumericField @bind-Value="CustomProtein" Label="Protein (g)" Min="0" Variant="Variant.Filled" />
        </MudItem>
      </MudGrid>
      <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6">
          <MudNumericField @bind-Value="CustomFat" Label="Yağ (g)" Min="0" Variant="Variant.Filled" />
        </MudItem>
        <MudItem xs="12" sm="6">
          <MudNumericField @bind-Value="CustomCarb" Label="Karbonhidrat (g)" Min="0" Variant="Variant.Filled" />
        </MudItem>
      </MudGrid>

      <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveCustomNutrition" FullWidth="true">
        Özel Makroyu Kaydet
      </MudButton>
    </MudPaper>
  }

</MudContainer>

@code {
  enum ViewMode { Auto, Custom }
  private ViewMode viewMode = ViewMode.Auto;

  // --- Otomatik hesaplama ---
  private string Sex { get; set; } = "male";
  private int Age { get; set; } = 25;
  private double Weight { get; set; } = 70;
  private double Height { get; set; } = 170;
  private double ActivityFactor { get; set; } = 1.2;
  private double CarbPercent { get; set; } = 0.55;

  private bool Calculated;
  private decimal Calories;
  private decimal Protein;
  private decimal Fat;
  private decimal Carbohydrate;

  // --- Özel Makro ---
  private decimal CustomCalories { get; set; }
  private decimal CustomProtein  { get; set; }
  private decimal CustomFat      { get; set; }
  private decimal CustomCarb     { get; set; }

  private void CalculateNutrition()
  {
    var BEE = Sex == "male"
      ? 66.5 + 13.8 * Weight + 5.0 * Height - 6.8 * Age
      : 655.1 +  9.6 * Weight + 1.9 * Height - 4.7 * Age;

    Calories     = (decimal)Math.Round(BEE * ActivityFactor, 0);
    Protein      = (decimal)Math.Round(Weight * 0.9, 1);
    Fat          = (decimal)Math.Round(((decimal)Calories * 0.30m) / 9m, 1);
    Carbohydrate = (decimal)Math.Round(((decimal)Calories * (decimal)CarbPercent) / 4m, 1);

    Calculated = true;
  }

  private async Task SaveNutrition()
  {
    var req = new AddUpdateDailyMacroRequest {
      Calories      = Calories,
      Proteins      = Protein,
      Fats          = Fat,
      Carbohydrates = Carbohydrate,
      AppUserId     = 1
    };
    var ok = await dailyMacroService.AddDailyMacro(req);
    Snackbar.Add(ok ? "Makro başarıyla kaydedildi!" : "Kayıt sırasında hata oldu.",
                 ok ? Severity.Success : Severity.Error);
  }

  private async Task SaveCustomNutrition()
  {
    var req = new AddUpdateDailyMacroRequest {
      Calories      = CustomCalories,
      Proteins      = CustomProtein,
      Fats          = CustomFat,
      Carbohydrates = CustomCarb,
      AppUserId     = 1
    };
    var ok = await dailyMacroService.AddDailyMacro(req);
    Snackbar.Add(ok ? "Özel makro başarıyla kaydedildi!" : "Kayıt sırasında hata oldu.",
                 ok ? Severity.Success : Severity.Error);
  }
}
