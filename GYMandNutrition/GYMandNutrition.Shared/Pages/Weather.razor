@page "/weather"

@* <PageTitle>Hesaplayıcı</PageTitle>



<div class="calculator-container">

    <p>
        The Calorie Calculator can be used to estimate the calories you need to consume each day.
        This calculator can also provide some simple guidelines if you want to gain or lose weight.
        This calculator uses the Revised Harris-Benedict equation to calculate your calorie needs.
    </p>

    <div class="calculator">
        <div class="settings">
            <div class="input-group">
                <label>Units:</label>
                <input type="radio" id="metric" name="units" value="metric" @onchange="e => Units = e.Value.ToString()" checked>
                <label for="metric">Metric</label>
                <input type="radio" id="imperial" name="units" value="imperial" @onchange="e => Units = e.Value.ToString()">
                <label for="imperial">Imperial</label>
            </div>
            <div class="input-group">
                <label>Sex:</label>
                <input type="radio" id="male" name="sex" value="male" @onchange="e => Sex = e.Value.ToString()" checked>
                <label for="male">Male</label>
                <input type="radio" id="female" name="sex" value="female" @onchange="e => Sex = e.Value.ToString()">
                <label for="female">Female</label>
            </div>
        </div>

        <div class="inputs">
            <div class="circular-input" id="age-circle">
                <label>Age</label>
                <input type="range" min="1" max="100" id="age" @bind="Age" oninput="updateCircle('age-circle', this.value)">
                <div class="circular-input-content">
                    <span id="age-value">25</span>
                    <p>Years</p>
                </div>
            </div>
            <div class="circular-input" id="weight-circle">
                <label>Weight</label>
                <input type="range" min="30" max="200" tabindex="" @bind="Weight" oninput="updateCircle('weight-circle', this.value)">
                <div class="circular-input-content">
                    <span id="weight-value">70</span>
                    <p>KG</p>
                </div>
            </div>
            <div class="circular-input" id="height-circle">
                <label>Height</label>
                <input type="range" min="100" max="220" @bind="Height" id="height" oninput="updateCircle('height-circle', this.value)">
                <div class="circular-input-content">
                    <span id="height-value">170</span>
                    <p>CM</p>
                </div>
            </div>
        </div>
        <br /><br />
        <div class="dropdowns">
            <select>
                <option value="little">Little to no exercise</option>
                <!-- Diğer seçenekler buraya eklenecek -->
            </select>
            <select>
                <option value="maintain">Stay the Same Weight</option>
                <!-- Diğer seçenekler buraya eklenecek -->
            </select>
        </div>

        <div class="result">
            <p>You would have to consume: <span>@CalculateCalories()</span></p>
        </div>
    </div>
</div>

<script>
    function updateCircle(circleId, value) {
        document.getElementById(circleId).querySelector('span').textContent = value;
        temp = value;
    }
</script>



@code {
    private string Units { get; set; } = "metric";
    private string Sex { get; set; } = "male";
    private int Age { get; set; } = 25;
    private int Weight { get; set; } = 70;
    private int Height { get; set; } = 170;
    private string ExerciseLevel { get; set; } = "little";
    private string WeightGoal { get; set; } = "maintain";

    private int CalculateCalories()
    {
        // Kalori hesaplama algoritması buraya gelecek.
        // Örnek olarak basit bir hesaplama yapılacak.
        int baseCalories = (Weight * 10) + (Height * 6) - (Age * 5);
        int exerciseModifier = ExerciseLevel switch
        {
            "little" => 200,
            "light" => 400,
            "moderate" => 600,
            "intense" => 800,
            _ => 0
        };

        return baseCalories + exerciseModifier;
    }
} *@

@inject IDailyMacroService dailyMacroService
@inject ISnackbar snackbar
@using Entities.DailyMacroEntities
@using MudBlazor

<PageTitle>Günlük Kalori ve Makro Hesabı</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-5">
    <MudPaper Elevation="4" Class="p-6">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Nutrition Calculator</MudText>
        <MudText Typo="Typo.subtitle1" Align="Align.Center">The calculator estimates your daily calories, protein, fat, and carbohydrate needs based on Harris-Benedict equation.</MudText>

        <MudDivider Class="my-4" />

        <MudRadioGroup  @bind-Value="Sex" Label="Sex" Orientation="Orientation.Horizontal" Class="mb-4">
            <MudRadio  Value="@("male")" Label="Erkek" />
            <MudRadio Value="@("female")" Label="Kadın" />
        </MudRadioGroup>

        <MudGrid Class="mb-4">
            <MudItem xs="12" sm="4">
                <MudNumericField @bind-Value="Age" Label="Yaş" Min="10" Max="100" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudNumericField @bind-Value="Weight" Label="Kilo (kg)" Min="30" Max="200" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudNumericField @bind-Value="Height" Label="Boy (cm)" Min="100" Max="250" Variant="Variant.Outlined" />
            </MudItem>
        </MudGrid>

        <MudGrid Class="mb-4">
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="ActivityFactor" Label="Egzersiz Seviyesi" Variant="Variant.Outlined">
                    <MudSelectItem Value="1.2">Egzersiz Yapmıyorum</MudSelectItem>
                    <MudSelectItem Value="1.3">Hafif Egzersiz</MudSelectItem>
                    <MudSelectItem Value="1.4">Orta Egzersiz</MudSelectItem>
                    <MudSelectItem Value="1.5">Ağır Egzersiz</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="CarbPercent" Label="Karbonhidrat %" Variant="Variant.Outlined">
                    <MudSelectItem Value="0.45">45%</MudSelectItem>
                    <MudSelectItem Value="0.55">55%</MudSelectItem>
                    <MudSelectItem Value="0.60">60%</MudSelectItem>
                    <MudSelectItem Value="0.65">65%</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CalculateNutrition" Class="my-4" FullWidth="true">Calculate</MudButton>

        @if (Calculated)
        {
            <MudPaper Class="pa-4 mt-4" Elevation="2">
                <MudText Typo="Typo.h6" Class="mb-2">Sonuç:</MudText>
                <MudList T="string" Dense="true">
                    <MudListItem >Günlük Kalori İhtiyacı: <strong>@Calories kcal</strong></MudListItem>
                    <MudListItem>Protein İhtiyacı: <strong>@Protein g</strong></MudListItem>
                    <MudListItem>Yağ İhtiyacı: <strong>@Fat g</strong></MudListItem>
                    <MudListItem>Karbonhidrat İhtiyacı: <strong>@Carbohydrate g</strong></MudListItem>
                </MudList>
                <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="SaveNutrition" Class="mt-4">Sonucu Kaydet</MudButton>
            </MudPaper>


        }

    </MudPaper>
</MudContainer>

@code {

    private string Sex { get; set; }
    private int Age { get; set; } = 25;
    private double Weight { get; set; } = 70;
    private double Height { get; set; } = 170;
    private double ActivityFactor { get; set; } = 1.2;
    private double CarbPercent { get; set; } = 0.55;

    private bool Calculated = false;
    private decimal Calories;
    private decimal Protein;
    private decimal Fat;
    private decimal Carbohydrate;

    private void CalculateNutrition()
    {
        double BEE;
        if(Sex == "male")
        {
            BEE = 66.5 + (13.8 * Weight) + (5.0 * Height) - (6.8 * Age);
        }
        else
        {
            BEE = 655.1 + (9.6 * Weight) + (1.9 * Height) - (4.7 * Age);
        }

        Calories = (decimal) Math.Round(BEE * ActivityFactor, 0);
        Protein = (decimal) Math.Round(Weight * 0.9, 1); // Ortalama protein
        Fat = (decimal)Math.Round(((decimal)Calories * (decimal)0.30) / 9, 1);
        Carbohydrate = (decimal)Math.Round(((decimal)Calories * (decimal)CarbPercent) / 4, 1);

        Calculated = true;
    }

    private async Task SaveNutrition()
    {
        var macroRequest = new AddUpdateDailyMacroRequest
        {
            Calories = Calories,
            Proteins = Protein,
            Fats = Fat,
            Carbohydrates = Carbohydrate,
            AppUserId = 1
        };

        var result = await dailyMacroService.AddDailyMacro(macroRequest);

        if (result)
        {
            snackbar.Add("Macro başarıyla kaydedildi!", Severity.Success);
        }
        else
        {
            snackbar.Add("Kayıt sırasında bir hata oluştu!", Severity.Error);   
        }
    }
}