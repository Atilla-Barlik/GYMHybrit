@* @page "/userProfile"
@using Entities.DailyMacroEntities


<h3>Makro Takibi</h3>

@if(get == false )
{
    <h1>Yükleniyor</h1>
}
else
{
    <div class="card mb-4">
        <div class="container mt-3">
            <h4 class="text-center font-weight-bold fs-3">Hedef Besin Değerleri</h4>
            <div class="row">
                <div class="col-md-3">
                    <div class="card bg-warning text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Kalori</h6>
                            <p class="font-weight-bold fs-4">@goalkcal Kcal</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Karbonhidrat</h6>
                            <p class="font-weight-bold fs-4">@goalCarbs g</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Protein</h6>
                            <p class="font-weight-bold fs-4">@goalProtein g</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-danger text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Yağ</h6>
                            <p class="font-weight-bold fs-4">@goalFat g</p>
                        </div>
                    </div>
                </div>
            </div>

            <br />
            <h4 class="text-center font-weight-bold fs-3">Alınan Besin Değerleri</h4>
            <div class="row">
                <div class="col-md-3">
                    <div class="card bg-warning text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Kalori</h6>
                            <p class="font-weight-bold fs-4">@totalKcal Kcal</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-center">
                        <div class="card-body">
                            <h6 class ="font-weight-bold fs-4">Toplam Karbonhidrat</h6>
                            <p class="font-weight-bold fs-4">@totalCarbs g</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Protein</h6>
                            <p class="font-weight-bold fs-4">@totalProtein g</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-danger text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Yağ</h6>
                            <p class="font-weight-bold fs-4">@totalFat g</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br /><br />
        @foreach (var meal in MealSummaries)
        {
            var targetMeal = mealTargets[meal.DailyMealTime];

            <div class="card mb-4">
                <div class="card-header">
                    <h5>@GetMealName(meal.DailyMealTime)</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <p><strong>Hedef Kalori:</strong> @targetMeal.TotalKcal Kcal</p>
                            <p><strong>Tüketilen Kalori:</strong> <span class="@GetDifferenceClass(targetMeal.TotalKcal, meal.TotalKcal)">@meal.TotalKcal Kcal</span></p>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-success text-dark" role="progressbar" style="width:@GetProgressPercentage(targetMeal.TotalKcal, meal.TotalKcal)%" aria-valuenow="@GetProgressPercentage(targetMeal.TotalKcal, meal.TotalKcal)" aria-valuemin="0" aria-valuemax="100">
                                    @if(GetProgressPercentage(targetMeal.TotalKcal,meal.TotalKcal) > 20)
                                    {
                                        @GetProgressLabel(targetMeal.TotalKcal, meal.TotalKcal)
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <p><strong>Hedef Karbonhidrat:</strong> @targetMeal.TotalCarbohydrate g</p>
                            <p><strong>Tüketilen Karbonhidrat:</strong> <span class="@GetDifferenceClass(targetMeal.TotalCarbohydrate, meal.TotalCarbohydrate)">@meal.TotalCarbohydrate g</span></p>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-primary text-dark" role="progressbar" style="width:@GetProgressPercentage(targetMeal.TotalCarbohydrate, meal.TotalCarbohydrate)%" aria-valuenow="@GetProgressPercentage(targetMeal.TotalCarbohydrate, meal.TotalCarbohydrate)" aria-valuemin="0" aria-valuemax="100">
                                    @if(GetProgressPercentage(targetMeal.TotalCarbohydrate, meal.TotalCarbohydrate) > 20)
                                    {
                                        @GetProgressLabel(targetMeal.TotalCarbohydrate, meal.TotalCarbohydrate)
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <p><strong>Hedef Protein:</strong> @targetMeal.TotalProtein g</p>
                            <p><strong>Tüketilen Protein:</strong> <span class="@GetDifferenceClass(targetMeal.TotalProtein, meal.TotalProtein)">@meal.TotalProtein g</span></p>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-warning text-dark" role="progressbar" style="width:@GetProgressPercentage(targetMeal.TotalProtein, meal.TotalProtein)%" aria-valuenow="@GetProgressPercentage(targetMeal.TotalProtein, meal.TotalProtein)" aria-valuemin="0" aria-valuemax="100">
                                    @if(GetProgressPercentage(targetMeal.TotalProtein, meal.TotalProtein) > 20)
                                    {
                                        @GetProgressLabel(targetMeal.TotalProtein, meal.TotalProtein)
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <p><strong>Hedef Yağ:</strong> @targetMeal.TotalFat g</p>
                            <p><strong>Tüketilen Yağ:</strong> <span class="@GetDifferenceClass(targetMeal.TotalFat, meal.TotalFat)">@meal.TotalFat g</span></p>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-danger text-dark" role="progressbar" style="width:@GetProgressPercentage(targetMeal.TotalFat, meal.TotalFat)%" aria-valuenow="@GetProgressPercentage(targetMeal.TotalFat, meal.TotalFat)" aria-valuemin="0" aria-valuemax="100">
                                    @if (GetProgressPercentage(targetMeal.TotalFat, meal.TotalFat) > 20)
                                    {
                                        @GetProgressLabel(targetMeal.TotalFat, meal.TotalFat)
                                    }

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private bool get = false;
    [Inject] IDailyNutritionDetailsService dailyNutritionDetailsService { get; set; }
    [Inject] IDailyMacroService dailyMacroService { get; set; }
    List<NutritionSummaryDto> MealSummaries = new List<NutritionSummaryDto>();
    DailyMacroResponseModel dailyMacroResponseModel;
    private decimal totalKcal,totalCarbs, totalProtein, totalFat,goalkcal,goalCarbs,goalProtein,goalFat;
    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        dailyMacroResponseModel = await dailyMacroService.GetDailyMacroByUserId(1);
        MealSummaries = await dailyNutritionDetailsService.GetTotalMeal(1);

        for (int i = 0; i <= 4; i++)
        {
            if (!MealSummaries.Any(m => m.DailyMealTime == i))
            {
                MealSummaries.Add(new NutritionSummaryDto { DailyMealTime = i, TotalKcal = 0, TotalCarbohydrate = 0, TotalProtein = 0, TotalFat = 0 });
            }
        }

        MealSummaries = MealSummaries.OrderBy(m => m.DailyMealTime).ToList();

        totalKcal = MealSummaries.Sum(d => d.TotalKcal);
        totalCarbs = MealSummaries.Sum(d => d.TotalCarbohydrate);
        totalProtein = MealSummaries.Sum(d => d.TotalProtein);
        totalFat = MealSummaries.Sum(d => d.TotalFat);
        goalkcal = dailyMacroResponseModel.Calories;
        goalCarbs = dailyMacroResponseModel.Carbohydrates;
        goalProtein = dailyMacroResponseModel.Proteins;
        goalFat = dailyMacroResponseModel.Fats;

        get = true;

    }


    private Dictionary<int, NutritionSummaryDto> mealTargets = new Dictionary<int, NutritionSummaryDto>
    {
        { 0, new NutritionSummaryDto { DailyMealTime = 0, TotalKcal = 500, TotalCarbohydrate = 50, TotalProtein = 20, TotalFat = 10 } },
        { 1, new NutritionSummaryDto { DailyMealTime = 1, TotalKcal = 600, TotalCarbohydrate = 60, TotalProtein = 25, TotalFat = 15 } },
        { 2, new NutritionSummaryDto { DailyMealTime = 2, TotalKcal = 700, TotalCarbohydrate = 70, TotalProtein = 30, TotalFat = 20 } },
        { 3, new NutritionSummaryDto { DailyMealTime = 3, TotalKcal = 200, TotalCarbohydrate = 20, TotalProtein = 10, TotalFat = 5 } },
        { 4, new NutritionSummaryDto { DailyMealTime = 4, TotalKcal = 200, TotalCarbohydrate = 20, TotalProtein = 10, TotalFat = 5 } }
    };

    private string GetDifferenceClass(decimal target, decimal actual)
    {
        if (actual < target)
        {
            return "text-danger"; // Eksikse kırmızı
        }
        else if (actual > target)
        {
            return "text-warning"; // Fazlaysa sarı
        }
        return "text-success"; // Hedefe uygunsa yeşil
    }

    private string GetMealName(int mealTime)
    {
        return mealTime switch
        {
            0 => "Sabah Öğünü",
            1 => "Öğle Öğünü",
            2 => "Akşam Öğünü",
            3 => "Ara Öğün 1",
            4 => "Ara Öğün 2",
            _ => "Bilinmeyen Öğün"
        };
    }

    private decimal GetProgressPercentage(decimal target, decimal actual)
    {
        if (target == 0) return 0;
        var percentage = (actual / target) * 100;
        return percentage > 100 ? 100 : percentage; // Progress bar'ı %100'den fazla göstermemek için
    }

    private string GetProgressLabel(decimal target, decimal actual)
    {

        if (actual < target)
        {
            return "Eksik"; // Eğer hedefin altındaysa "Eksik" yazacak
        }
        else if (actual > target)
        {
            return "Fazla"; // Eğer hedefin üstündeyse "Fazla" yazacak
        }
        return "İdeal"; // Hedef ile eşitse "İdeal" yazacak
    }


} 

        @page "/userProfile"
@using Entities.DailyMacroEntities
@using Entities.DailyNutritionEntities
@inject IDailyNutritionDetailsService dailyNutritionDetailsService
@inject IDailyMacroService dailyMacroService

<h3 class="text-center my-4">Makro Takibi</h3>

@if (!loaded)
{
    <div class="text-center">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        <p>Yükleniyor…</p>
    </div>
}
else
{
    <!-- --- HEDEF VE ALINAN TOPLAM ÖZETİ --- -->
    <div class="row mb-5 gx-3">
        <!-- Hedefler -->
        <div class="col-12 mb-3">
            <h5 class="text-center">🎯 Hedef Besin Değerleri</h5>
        </div>
        @foreach (var kv in overallTargets)
        {
            <div class="col-sm-6 col-md-3 mb-2">
                <MudPaper Elevation="2" Class="@($"p-3 text-center {kv.Value.BgColor}")">
                    <MudText Typo="Typo.subtitle1" Class="fw-bold">@kv.Key</MudText>
                    <MudText Typo="Typo.h5">@kv.Value.Amount @kv.Value.Unit</MudText>
                </MudPaper>
            </div>
        }

        <!-- Alınan -->
        <div class="col-12 mt-4 mb-3">
            <h5 class="text-center">✅ Alınan Besin Değerleri</h5>
        </div>
        @foreach (var kv in overallTaken)
        {
            <div class="col-sm-6 col-md-3 mb-2">
                <MudPaper Elevation="2" Class="@($"p-3 text-center {kv.Value.BgColor}")">
                    <MudText Typo="Typo.subtitle1" Class="fw-bold">@kv.Key</MudText>
                    <MudText Typo="Typo.h5">@kv.Value.Amount @kv.Value.Unit</MudText>
                </MudPaper>
            </div>
        }
    </div>

    <!-- --- HER ÖĞÜN İÇİN DİNAMİK KARTLAR --- -->

    @foreach (var grp in groups)
    {
        var mealTime = grp.Key+1;
        // toplamı yeniden hesaplıyoruz (zaten tek öğün bazında geliyorsa aynı)
        var taken = new NutritionSummaryDto {
            DailyMealTime      = mealTime,
            TotalKcal          = grp.Sum(x => x.TotalKcal),
            TotalCarbohydrate  = grp.Sum(x => x.TotalCarbohydrate),
            TotalProtein       = grp.Sum(x => x.TotalProtein),
            TotalFat           = grp.Sum(x => x.TotalFat)
        };
        // hedefi alıyoruz, yoksa sıfır
        mealTargets.TryGetValue(mealTime-1, out var target);

        <MudPaper Class="mb-4">
            <MudCardHeader Class="bg-secondary text-white">
                <MudText Typo="Typo.h6">Öğün @mealTime </MudText>
            </MudCardHeader>
            <MudCardContent>
                <div class="row gx-3">
                    @* Kalori 
                    <div class="col-md-3 mb-3">
                        <MudText  Typo="Typo.subtitle2" Class="fw-bold">Kalori</MudText>
                        <div class="d-flex align-items-center">
                            <MudText Class="me-2">@taken.TotalKcal Kcal</MudText>
                            <MudText Color="@GetDiffColorEnum(target?.TotalKcal ?? 0, taken.TotalKcal)">
                                (@GetProgressLabel(target?.TotalKcal ?? 0, taken.TotalKcal))
                            </MudText>
                        </div>
                        <MudProgressLinear Color="Color.Primary"
                                           Value="GetProgressPercent(target?.TotalKcal ?? 0, taken.TotalKcal)"
                                           Buffer="false" />
                    </div>
                    @* Karbonhidrat 
                    <div class="col-md-3 mb-3">
                        <MudText Typo="Typo.subtitle2" Class="fw-bold">Karbonhidrat</MudText>
                        <div class="d-flex align-items-center">
                            <MudText Class="me-2">@taken.TotalCarbohydrate g</MudText>
                            <MudText Color="@GetDiffColorEnum(target?.TotalCarbohydrate ?? 0, taken.TotalCarbohydrate)">
                                (@GetProgressLabel(target?.TotalCarbohydrate ?? 0, taken.TotalCarbohydrate))
                            </MudText>
                        </div>
                        <MudProgressLinear Color="Color.Info"
                                           Value="GetProgressPercent(target?.TotalCarbohydrate ?? 0,taken.TotalCarbohydrate)"
                                           Buffer="false" />
                    </div>
                    @* Protein 
                    <div class="col-md-3 mb-3">
                        <MudText Typo="Typo.subtitle2" Class="fw-bold">Protein</MudText>
                        <div class="d-flex align-items-center">
                            <MudText Class="me-2">@taken.TotalProtein g</MudText>
                            <MudText Color="@GetDiffColorEnum(target?.TotalProtein ?? 0, taken.TotalProtein)">
                                (@GetProgressLabel(target?.TotalProtein ?? 0, taken.TotalProtein))
                            </MudText>
                        </div>
                        <MudProgressLinear Color="Color.Success"
                                           Value="GetProgressPercent(target?.TotalProtein ?? 0, taken.TotalProtein)"
                                           Buffer="false" />
                    </div>
                    @* Yağ 
                    <div class="col-md-3 mb-3">
                        <MudText Typo="Typo.subtitle2" Class="fw-bold">Yağ</MudText>
                        <div class="d-flex align-items-center">
                            <MudText Class="me-2">@taken.TotalFat g</MudText>
                            <MudText Color="@GetDiffColorEnum(target?.TotalFat ?? 0, taken.TotalFat)">
                                (@GetProgressLabel(target?.TotalFat ?? 0, taken.TotalFat))
                            </MudText>
                        </div>
                        <MudProgressLinear Color="Color.Error"
                                           Value="GetProgressPercent(target?.TotalFat ?? 0, taken.TotalFat)"
                                           Buffer="false" />
                    </div>
                </div>
            </MudCardContent>
        </MudPaper>
    }
}

@code {
    private bool loaded;
    List<NutritionSummaryDto> MealSummaries = new();
    DailyMacroResponseModel dailyMacro;
    private IEnumerable<IGrouping<int, NutritionSummaryDto>> groups =>
        MealSummaries
            .GroupBy(x => x.DailyMealTime)
            .OrderBy(g => g.Key);

    // Hedef sözlüğü (isteğe göre servis’den de çekilebilir)
    private readonly Dictionary<int, NutritionSummaryDto> mealTargets = new Dictionary<int, NutritionSummaryDto>
    {
        { 0, new NutritionSummaryDto{ DailyMealTime=0, TotalKcal=500, TotalCarbohydrate=50, TotalProtein=20, TotalFat=10 } },
        { 1, new NutritionSummaryDto{ DailyMealTime=1, TotalKcal=600, TotalCarbohydrate=60, TotalProtein=25, TotalFat=15 } },
        { 2, new NutritionSummaryDto{ DailyMealTime=2, TotalKcal=700, TotalCarbohydrate=70, TotalProtein=30, TotalFat=20 } },
        //… eğer daha fazla varsa ekleyebilirsin
    };

    // Genel özet kartları için
    private Dictionary<string,(decimal Amount,string Unit,string BgColor)> overallTargets;
    private Dictionary<string,(decimal Amount,string Unit,string BgColor)> overallTaken;

    protected override async Task OnInitializedAsync()
    {
        dailyMacro      = await dailyMacroService.GetDailyMacroByUserId(1);
        MealSummaries   = await dailyNutritionDetailsService.GetTotalMeal(1);

        // GENEL ÖZET: hedefler
        overallTargets = new()
        {
            ["Kalori"]       = (dailyMacro.Calories,       "Kcal",   "bg-warning"),
            ["Karbonhidrat"] = (dailyMacro.Carbohydrates,   "g",      "bg-info"),
            ["Protein"]      = (dailyMacro.Proteins,        "g",      "bg-success"),
            ["Yağ"]          = (dailyMacro.Fats,            "g",      "bg-danger"),
        };

        // GENEL ÖZET: alınan
        overallTaken = new()
        {
            ["Kalori"]       = (MealSummaries.Sum(x=>x.TotalKcal),            "Kcal", "bg-warning"),
            ["Karbonhidrat"] = (MealSummaries.Sum(x=>x.TotalCarbohydrate),    "g",    "bg-info"),
            ["Protein"]      = (MealSummaries.Sum(x=>x.TotalProtein),         "g",    "bg-success"),
            ["Yağ"]          = (MealSummaries.Sum(x=>x.TotalFat),             "g",    "bg-danger"),
        };

        loaded = true;
    }

    string GetProgressLabel(decimal target, decimal actual)
        => actual < target ? "Eksik" : actual > target ? "Fazla" : "İdeal";

    string GetDiffColor(decimal target, decimal actual)
        => actual < target ? "text-danger" : actual > target ? "text-warning" : "text-success";

    private double GetProgressPercent(decimal target, decimal actual)
    {
        if (target == 0) return 0;
        var percentage = (double)(actual / target * 100);
        return percentage > 100 ? 100 : percentage;
    }

    MudBlazor.Color GetDiffColorEnum(decimal target, decimal actual)
    => actual < target ? Color.Error
       : actual > target ? Color.Warning
       : Color.Success;
}
*@

        @page "/userProfile"



@inject IDailyMacroService dailyMacroService
@inject IDailyNutritionDetailsService dailyNutritionDetailsService
@inject ISnackbar Snackbar
@inject IAppUserService appUserService
@inject IAppUserDetailService appUserDetailService
@inject IAppUserExerciseProgramService appUserExerciseProgramService
<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    @if (!loaded)
    {
        <div class="text-center">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            <p>Yükleniyor…</p>
        </div>
    }
    else
    {
        <MudPaper Elevation="2" Class="p-4 mb-6 hover-zoom fade-in-up">
            <MudStack Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                <MudText Typo="Typo.h5">Profil Bilgileri</MudText>
                <MudButtonGroup>
                    <MudButton Variant="@(mode==ProfileMode.View?Variant.Filled:Variant.Outlined)"
                    Color="Color.Primary"
                    OnClick="@(()=>ChangeMode(ProfileMode.View))">
                        Görüntüle
                    </MudButton>
                    <MudButton Variant="@(mode==ProfileMode.Edit?Variant.Filled:Variant.Outlined)"
                    Color="Color.Primary"
                    OnClick="@(()=>ChangeMode(ProfileMode.Edit))">
                        Düzenle
                    </MudButton>
                </MudButtonGroup>
            </MudStack>

            <MudGrid GutterSize="3" AlignItems="Center">
                <!-- Profil Foto -->
                <MudItem xs="12" sm="4" Class="d-flex justify-center">
                    <MudAvatar Size="Size.Large" Src="https://png.pngtree.com/png-vector/20190223/ourmid/pngtree-profile-line-black-icon-png-image_691065.jpg" />
                </MudItem>

                <!-- Alanlar -->
                <MudItem xs="12" sm="8">
                    <MudGrid GutterSize="2">
                        @if (mode == ProfileMode.View)
                        {
                            <MudItem xs="6">
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Ad Soyad</MudText>
                                <MudText Typo="Typo.h6">@user.AppUserFirstName</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Yaş</MudText>
                                <MudText Typo="Typo.h6">@appuserDetail.Age</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Boy</MudText>
                                <MudText Typo="Typo.h6">@($"{appuserDetail.Length} cm")</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Kilo</MudText>
                                <MudText Typo="Typo.h6">@($"{appuserDetail.Weight} kg")</MudText>
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="6">
                                <MudTextField @bind-Value="user.AppUserFirstName" Label="Ad Soyad" Variant="Variant.Filled" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudNumericField @bind-Value="editAppuserDetail.Age" Label="Yaş" Min="1" Max="120" Variant="Variant.Filled" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudNumericField @bind-Value="editAppuserDetail.Length" Label="Boy (cm)" Min="50" Max="250" Variant="Variant.Filled" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudNumericField @bind-Value="editAppuserDetail.Weight" Label="Kilo (kg)" Min="20" Max="300" Variant="Variant.Filled" />
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-end mt-2">
                                <MudButton Color="Color.Primary" OnClick="SaveProfile">Kaydet</MudButton>
                                <MudButton Color="Color.Secondary" OnClick="CancelEdit" Class="ml-2">İptal</MudButton>
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
</MudContainer>

@* Alt blokta özetler… (önceki örnekteki üç kartı aynen ekleyebilirsiniz) *@
@if (!loaded2)
{
    <div class="text-center">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        <p>Yükleniyor…</p>
    </div>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">


        <!-- ALT BLOK: Üç Özet Kartı -->
        <MudGrid GutterSize="3">
            <!-- Hedef Makro -->
            <MudItem xs="12" sm="4">
                <MudPaper Elevation="4" Class="p-4 text-center hover-zoom fade-in-up" Style="min-height:250px;">
                    <MudText Typo="Typo.h6" Class="mb-2">🎯 Hedef Makro</MudText>
                    <MudDivider Class="mb-2" />
                    <MudList T="decimal" Dense="true">
                        <MudListItem>Kalori: <b>@dailyMacro.Calories Kcal</b></MudListItem>
                        <MudListItem>Protein: <b>@dailyMacro.Proteins g</b></MudListItem>
                        <MudListItem>Yağ: <b>@dailyMacro.Fats g</b></MudListItem>
                        <MudListItem>Karb.: <b>@dailyMacro.Carbohydrates g</b></MudListItem>
                    </MudList>
                </MudPaper>
            </MudItem>

            <!-- Alınan Besin Değerleri -->
            <MudItem xs="12" sm="4" >
                <MudPaper Elevation="4" Class="p-4 text-center hover-zoom fade-in-up" Style="min-height:250px;">
                    <MudText Typo="Typo.h6" Class="mb-2">✅ Alınan Besinler</MudText>
                    <MudDivider Class="mb-2" />
                    <MudList T="decimal" Dense="true">
                        <MudListItem>Kalori: <b>@overallTaken["Kalori"].Amount Kcal</b></MudListItem>
                        <MudListItem>Protein: <b>@overallTaken["Protein"].Amount g</b></MudListItem>
                        <MudListItem>Yağ: <b>@overallTaken["Yağ"].Amount g</b></MudListItem>
                        <MudListItem>Karb.: <b>@overallTaken["Karbonhidrat"].Amount g</b></MudListItem>
                    </MudList>
                </MudPaper>
            </MudItem>

            <!-- Egzersizle Yakılan Kalori -->
            <MudItem xs="12" sm="4">
                <MudPaper Elevation="4" Class="p-4 text-center hover-zoom fade-in-up" Style="min-height:250px;">
                    <MudText Typo="Typo.h6" Class="mb-2">🔥 Egzersizle Yakılan</MudText>
                    <MudDivider Class="mb-2" />

                    <MudSelect T="int"
                               Label="Program Numarası"
                               Value="selectedDayNo"
                               ValueChanged="OnDayChanged"
                               ValueExpression="() => selectedDayNo"
                               Variant="Variant.Filled"
                               Class="mb-2">
                        @foreach (var dto in dailyBurns)
                        {
                            <MudSelectItem Value="@dto.DayNo">Program @dto.DayNo</MudSelectItem>
                        }
                    </MudSelect>

                    <MudText Typo="Typo.h4">@selectedBurnKcal Kcal</MudText>
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
				<MudPaper Elevation="4" Class="p-4 text-center mt-4 fade-in-up hover-zoom ">
                    <MudText Typo="Typo.h6" Class="mb-2">⚖️ Kalori Dengesi</MudText>
                    <MudDivider Class="mb-2" />
                    <MudText Typo="Typo.subtitle2">
                        Net Alım: <b>@CalorieNet Kcal</b>
                    </MudText><br />
                    <MudText Typo="Typo.subtitle2">
                        Hedef: <b>@dailyMacro.Calories Kcal</b>
                    </MudText><br />
                    <MudText Typo="Typo.h4" Class="mt-1">
                        Fark: <b>@CalorieDiff Kcal</b> (@(CalorieDiff > 0 ? "Fazla" : "Açık"))
                    </MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>

    </MudContainer>
}


@code {
    enum ProfileMode { View, Edit }

    private ProfileMode mode = ProfileMode.View;
    private bool loaded,loaded2;
    private AppUserResponseModel user;
    private AddUpdateAppUserDetailRequest editModel;
    private AddUpdateAppUserDetailRequest appuserDetail;
    private AddUpdateAppUserDetailRequest editAppuserDetail;

    private DailyMacroResponseModel dailyMacro;
    private Dictionary<string, (decimal Amount, string Unit)> overallTaken;
    private decimal burnedCalories;

    private List<GetAppUserExerciseProgramTotalBurnKcalResponseModel> dailyBurns = new();
    private int selectedDayNo;
    private int selectedBurnKcal;

    private decimal CalorieNet => overallTaken["Kalori"].Amount - selectedBurnKcal;
    private decimal CalorieDiff => CalorieNet - dailyMacro.Calories;

    protected override async Task OnInitializedAsync()
    {
        user = await appUserService.GetAppUserByUserId(1);
        appuserDetail = await appUserDetailService.GetAppUserDetailByUserId(1);
        user.AppUserFirstName = user.AppUserFirstName + " " + user.AppUserLastName;
        if(user.AppUserId == 0 )
        {
            user = new AppUserResponseModel
                {
                    AppUserFirstName = "Henüz Profil Oluşturulmamış",
                 };
        }
        editAppuserDetail = new AddUpdateAppUserDetailRequest
            {

                Age = appuserDetail.Age,
                sex = appuserDetail.sex,
                Length = appuserDetail.Length,
                Weight = appuserDetail.Weight,
                AppUserId = user.AppUserId,
                AppUserDetailId = appuserDetail.AppUserDetailId,
                AfterImage = " ",
                BeforeImage = " "
            };

        // Diğer servis çağrılarınız…
        // dailyMacro = await dailyMacroService…
        // overallTaken = …
        // burnedCalories = …
        dailyMacro = await dailyMacroService.GetDailyMacroByUserId(1);

        // Alınan besinler toplamı
        var takenList = await dailyNutritionDetailsService.GetTotalMeal(1);
        var totKcal = takenList.Sum(x => x.TotalKcal);
        var totProt = takenList.Sum(x => x.TotalProtein);
        var totFat = takenList.Sum(x => x.TotalFat);
        var totCarb = takenList.Sum(x => x.TotalCarbohydrate);

        overallTaken = new()
            {
                ["Kalori"] = (totKcal, "Kcal"),
                ["Protein"] = (totProt, "g"),
                ["Yağ"] = (totFat, "g"),
                ["Karbonhidrat"] = (totCarb, "g")
            };

        // Egzersizle yakılan kalori
        //burnedCalories = await exerciseBurnService.GetTotalBurnedByUser(1);
        dailyBurns = await appUserExerciseProgramService.GetDailyBurnSummaryAsync(user.AppUserId);
        if (dailyBurns.Any())
        {
            selectedDayNo = dailyBurns.First().DayNo;
            selectedBurnKcal = dailyBurns.First().TotalBurnedKcal;
        }

        loaded = true;
        loaded2 = true;
    }

  private async Task SaveProfile()
  {
    // basit validasyon
        if (string.IsNullOrWhiteSpace(user.AppUserFirstName))
    {
            Snackbar.Add("Ad Soyad boş olamaz.", Severity.Warning);
      return;
    }

        var ok = await appUserDetailService.UpdateAppUserDetail(editAppuserDetail);
    if (ok)
    {
      appuserDetail = editAppuserDetail;    // güncellenen modeli göster
      mode = ProfileMode.View;
      Snackbar.Add("Profil güncellendi.", Severity.Success);
    }
    else
    {
      Snackbar.Add("Güncelleme başarısız.", Severity.Error);
    }
  }

  private void CancelEdit()
  {
    // değişiklikleri iptal edip formu eski haline döndür
    user = new AppUserResponseModel {
      AppUserFirstName = user.AppUserFirstName + " " + user.AppUserLastName,
    };
    mode = ProfileMode.View;
  }
    void ChangeMode(ProfileMode m)
    {
        mode = m;
    }
    void OnDayChanged(int dayNo)
    {
        selectedDayNo = dayNo;
        selectedBurnKcal = dailyBurns.FirstOrDefault(x => x.DayNo == dayNo)?.TotalBurnedKcal ?? 0;
        StateHasChanged();
    }

    // binding değiştiğinde tetiklemek için
    private int SelectedDayNo
    {
        get => selectedDayNo;
        set
        {
            selectedDayNo = value;
        }
    }
}
<style>
    .fixed-card {
        min-height: 250px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    

    }

    .fade-in-up {
        animation: fadeInUp 0.6s ease-out both; /* both = forwards + backwards */
    }

    .hover-zoom {
        /* transition transform’ı dinleyecek */
        transition: transform 0.2s ease !important, box-shadow 0.2s ease;
    }

        .hover-zoom:hover {
            transform: translateY(0) scale(1.05) !important;
            box-shadow: 0 10px 20px rgba(0,0,0,0.2) !important;
        }
</style>