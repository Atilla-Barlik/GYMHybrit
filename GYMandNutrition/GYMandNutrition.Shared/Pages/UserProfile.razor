@* @page "/userProfile"
@using Entities.DailyMacroEntities


<h3>Makro Takibi</h3>

@if(get == false )
{
    <h1>Yükleniyor</h1>
}
else
{
    <div class="card mb-4">
        <div class="container mt-3">
            <h4 class="text-center font-weight-bold fs-3">Hedef Besin Değerleri</h4>
            <div class="row">
                <div class="col-md-3">
                    <div class="card bg-warning text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Kalori</h6>
                            <p class="font-weight-bold fs-4">@goalkcal Kcal</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Karbonhidrat</h6>
                            <p class="font-weight-bold fs-4">@goalCarbs g</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Protein</h6>
                            <p class="font-weight-bold fs-4">@goalProtein g</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-danger text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Yağ</h6>
                            <p class="font-weight-bold fs-4">@goalFat g</p>
                        </div>
                    </div>
                </div>
            </div>

            <br />
            <h4 class="text-center font-weight-bold fs-3">Alınan Besin Değerleri</h4>
            <div class="row">
                <div class="col-md-3">
                    <div class="card bg-warning text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Kalori</h6>
                            <p class="font-weight-bold fs-4">@totalKcal Kcal</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-center">
                        <div class="card-body">
                            <h6 class ="font-weight-bold fs-4">Toplam Karbonhidrat</h6>
                            <p class="font-weight-bold fs-4">@totalCarbs g</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Protein</h6>
                            <p class="font-weight-bold fs-4">@totalProtein g</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-danger text-center">
                        <div class="card-body">
                            <h6 class="font-weight-bold fs-4">Toplam Yağ</h6>
                            <p class="font-weight-bold fs-4">@totalFat g</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br /><br />
        @foreach (var meal in MealSummaries)
        {
            var targetMeal = mealTargets[meal.DailyMealTime];

            <div class="card mb-4">
                <div class="card-header">
                    <h5>@GetMealName(meal.DailyMealTime)</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <p><strong>Hedef Kalori:</strong> @targetMeal.TotalKcal Kcal</p>
                            <p><strong>Tüketilen Kalori:</strong> <span class="@GetDifferenceClass(targetMeal.TotalKcal, meal.TotalKcal)">@meal.TotalKcal Kcal</span></p>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-success text-dark" role="progressbar" style="width:@GetProgressPercentage(targetMeal.TotalKcal, meal.TotalKcal)%" aria-valuenow="@GetProgressPercentage(targetMeal.TotalKcal, meal.TotalKcal)" aria-valuemin="0" aria-valuemax="100">
                                    @if(GetProgressPercentage(targetMeal.TotalKcal,meal.TotalKcal) > 20)
                                    {
                                        @GetProgressLabel(targetMeal.TotalKcal, meal.TotalKcal)
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <p><strong>Hedef Karbonhidrat:</strong> @targetMeal.TotalCarbohydrate g</p>
                            <p><strong>Tüketilen Karbonhidrat:</strong> <span class="@GetDifferenceClass(targetMeal.TotalCarbohydrate, meal.TotalCarbohydrate)">@meal.TotalCarbohydrate g</span></p>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-primary text-dark" role="progressbar" style="width:@GetProgressPercentage(targetMeal.TotalCarbohydrate, meal.TotalCarbohydrate)%" aria-valuenow="@GetProgressPercentage(targetMeal.TotalCarbohydrate, meal.TotalCarbohydrate)" aria-valuemin="0" aria-valuemax="100">
                                    @if(GetProgressPercentage(targetMeal.TotalCarbohydrate, meal.TotalCarbohydrate) > 20)
                                    {
                                        @GetProgressLabel(targetMeal.TotalCarbohydrate, meal.TotalCarbohydrate)
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <p><strong>Hedef Protein:</strong> @targetMeal.TotalProtein g</p>
                            <p><strong>Tüketilen Protein:</strong> <span class="@GetDifferenceClass(targetMeal.TotalProtein, meal.TotalProtein)">@meal.TotalProtein g</span></p>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-warning text-dark" role="progressbar" style="width:@GetProgressPercentage(targetMeal.TotalProtein, meal.TotalProtein)%" aria-valuenow="@GetProgressPercentage(targetMeal.TotalProtein, meal.TotalProtein)" aria-valuemin="0" aria-valuemax="100">
                                    @if(GetProgressPercentage(targetMeal.TotalProtein, meal.TotalProtein) > 20)
                                    {
                                        @GetProgressLabel(targetMeal.TotalProtein, meal.TotalProtein)
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <p><strong>Hedef Yağ:</strong> @targetMeal.TotalFat g</p>
                            <p><strong>Tüketilen Yağ:</strong> <span class="@GetDifferenceClass(targetMeal.TotalFat, meal.TotalFat)">@meal.TotalFat g</span></p>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-danger text-dark" role="progressbar" style="width:@GetProgressPercentage(targetMeal.TotalFat, meal.TotalFat)%" aria-valuenow="@GetProgressPercentage(targetMeal.TotalFat, meal.TotalFat)" aria-valuemin="0" aria-valuemax="100">
                                    @if (GetProgressPercentage(targetMeal.TotalFat, meal.TotalFat) > 20)
                                    {
                                        @GetProgressLabel(targetMeal.TotalFat, meal.TotalFat)
                                    }

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private bool get = false;
    [Inject] IDailyNutritionDetailsService dailyNutritionDetailsService { get; set; }
    [Inject] IDailyMacroService dailyMacroService { get; set; }
    List<NutritionSummaryDto> MealSummaries = new List<NutritionSummaryDto>();
    DailyMacroResponseModel dailyMacroResponseModel;
    private decimal totalKcal,totalCarbs, totalProtein, totalFat,goalkcal,goalCarbs,goalProtein,goalFat;
    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        dailyMacroResponseModel = await dailyMacroService.GetDailyMacroByUserId(1);
        MealSummaries = await dailyNutritionDetailsService.GetTotalMeal(1);

        for (int i = 0; i <= 4; i++)
        {
            if (!MealSummaries.Any(m => m.DailyMealTime == i))
            {
                MealSummaries.Add(new NutritionSummaryDto { DailyMealTime = i, TotalKcal = 0, TotalCarbohydrate = 0, TotalProtein = 0, TotalFat = 0 });
            }
        }

        MealSummaries = MealSummaries.OrderBy(m => m.DailyMealTime).ToList();

        totalKcal = MealSummaries.Sum(d => d.TotalKcal);
        totalCarbs = MealSummaries.Sum(d => d.TotalCarbohydrate);
        totalProtein = MealSummaries.Sum(d => d.TotalProtein);
        totalFat = MealSummaries.Sum(d => d.TotalFat);
        goalkcal = dailyMacroResponseModel.Calories;
        goalCarbs = dailyMacroResponseModel.Carbohydrates;
        goalProtein = dailyMacroResponseModel.Proteins;
        goalFat = dailyMacroResponseModel.Fats;

        get = true;

    }


    private Dictionary<int, NutritionSummaryDto> mealTargets = new Dictionary<int, NutritionSummaryDto>
    {
        { 0, new NutritionSummaryDto { DailyMealTime = 0, TotalKcal = 500, TotalCarbohydrate = 50, TotalProtein = 20, TotalFat = 10 } },
        { 1, new NutritionSummaryDto { DailyMealTime = 1, TotalKcal = 600, TotalCarbohydrate = 60, TotalProtein = 25, TotalFat = 15 } },
        { 2, new NutritionSummaryDto { DailyMealTime = 2, TotalKcal = 700, TotalCarbohydrate = 70, TotalProtein = 30, TotalFat = 20 } },
        { 3, new NutritionSummaryDto { DailyMealTime = 3, TotalKcal = 200, TotalCarbohydrate = 20, TotalProtein = 10, TotalFat = 5 } },
        { 4, new NutritionSummaryDto { DailyMealTime = 4, TotalKcal = 200, TotalCarbohydrate = 20, TotalProtein = 10, TotalFat = 5 } }
    };

    private string GetDifferenceClass(decimal target, decimal actual)
    {
        if (actual < target)
        {
            return "text-danger"; // Eksikse kırmızı
        }
        else if (actual > target)
        {
            return "text-warning"; // Fazlaysa sarı
        }
        return "text-success"; // Hedefe uygunsa yeşil
    }

    private string GetMealName(int mealTime)
    {
        return mealTime switch
        {
            0 => "Sabah Öğünü",
            1 => "Öğle Öğünü",
            2 => "Akşam Öğünü",
            3 => "Ara Öğün 1",
            4 => "Ara Öğün 2",
            _ => "Bilinmeyen Öğün"
        };
    }

    private decimal GetProgressPercentage(decimal target, decimal actual)
    {
        if (target == 0) return 0;
        var percentage = (actual / target) * 100;
        return percentage > 100 ? 100 : percentage; // Progress bar'ı %100'den fazla göstermemek için
    }

    private string GetProgressLabel(decimal target, decimal actual)
    {
        
        if (actual < target)
        {
            return "Eksik"; // Eğer hedefin altındaysa "Eksik" yazacak
        }
        else if (actual > target)
        {
            return "Fazla"; // Eğer hedefin üstündeyse "Fazla" yazacak
        }
        return "İdeal"; // Hedef ile eşitse "İdeal" yazacak
    }


} *@

        @page "/userProfile"
@using Entities.DailyMacroEntities
@using Entities.DailyNutritionEntities
@inject IDailyNutritionDetailsService dailyNutritionDetailsService
@inject IDailyMacroService dailyMacroService

<h3 class="text-center my-4">Makro Takibi</h3>

@if (!loaded)
{
    <div class="text-center">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        <p>Yükleniyor…</p>
    </div>
}
else
{
    <!-- --- HEDEF VE ALINAN TOPLAM ÖZETİ --- -->
    <div class="row mb-5 gx-3">
        <!-- Hedefler -->
        <div class="col-12 mb-3">
            <h5 class="text-center">🎯 Hedef Besin Değerleri</h5>
        </div>
        @foreach (var kv in overallTargets)
        {
            <div class="col-sm-6 col-md-3 mb-2">
                <MudPaper Elevation="2" Class="@($"p-3 text-center {kv.Value.BgColor}")">
                    <MudText Typo="Typo.subtitle1" Class="fw-bold">@kv.Key</MudText>
                    <MudText Typo="Typo.h5">@kv.Value.Amount @kv.Value.Unit</MudText>
                </MudPaper>
            </div>
        }

        <!-- Alınan -->
        <div class="col-12 mt-4 mb-3">
            <h5 class="text-center">✅ Alınan Besin Değerleri</h5>
        </div>
        @foreach (var kv in overallTaken)
        {
            <div class="col-sm-6 col-md-3 mb-2">
                <MudPaper Elevation="2" Class="@($"p-3 text-center {kv.Value.BgColor}")">
                    <MudText Typo="Typo.subtitle1" Class="fw-bold">@kv.Key</MudText>
                    <MudText Typo="Typo.h5">@kv.Value.Amount @kv.Value.Unit</MudText>
                </MudPaper>
            </div>
        }
    </div>

    <!-- --- HER ÖĞÜN İÇİN DİNAMİK KARTLAR --- -->
    
    @foreach (var grp in groups)
    {
        var mealTime = grp.Key+1;
        // toplamı yeniden hesaplıyoruz (zaten tek öğün bazında geliyorsa aynı)
        var taken = new NutritionSummaryDto {
            DailyMealTime      = mealTime,
            TotalKcal          = grp.Sum(x => x.TotalKcal),
            TotalCarbohydrate  = grp.Sum(x => x.TotalCarbohydrate),
            TotalProtein       = grp.Sum(x => x.TotalProtein),
            TotalFat           = grp.Sum(x => x.TotalFat)
        };
        // hedefi alıyoruz, yoksa sıfır
        mealTargets.TryGetValue(mealTime-1, out var target);

        <MudPaper Class="mb-4">
            <MudCardHeader Class="bg-secondary text-white">
                <MudText Typo="Typo.h6">Öğün @mealTime </MudText>
            </MudCardHeader>
            <MudCardContent>
                <div class="row gx-3">
                    @* Kalori *@
                    <div class="col-md-3 mb-3">
                        <MudText  Typo="Typo.subtitle2" Class="fw-bold">Kalori</MudText>
                        <div class="d-flex align-items-center">
                            <MudText Class="me-2">@taken.TotalKcal Kcal</MudText>
                            <MudText Color="@GetDiffColorEnum(target?.TotalKcal ?? 0, taken.TotalKcal)">
                                (@GetProgressLabel(target?.TotalKcal ?? 0, taken.TotalKcal))
                            </MudText>
                        </div>
                        <MudProgressLinear Color="Color.Primary"
                                           Value="GetProgressPercent(target?.TotalKcal ?? 0, taken.TotalKcal)"
                                           Buffer="false" />
                    </div>
                    @* Karbonhidrat *@
                    <div class="col-md-3 mb-3">
                        <MudText Typo="Typo.subtitle2" Class="fw-bold">Karbonhidrat</MudText>
                        <div class="d-flex align-items-center">
                            <MudText Class="me-2">@taken.TotalCarbohydrate g</MudText>
                            <MudText Color="@GetDiffColorEnum(target?.TotalCarbohydrate ?? 0, taken.TotalCarbohydrate)">
                                (@GetProgressLabel(target?.TotalCarbohydrate ?? 0, taken.TotalCarbohydrate))
                            </MudText>
                        </div>
                        <MudProgressLinear Color="Color.Info"
                                           Value="GetProgressPercent(target?.TotalCarbohydrate ?? 0,taken.TotalCarbohydrate)"
                                           Buffer="false" />
                    </div>
                    @* Protein *@
                    <div class="col-md-3 mb-3">
                        <MudText Typo="Typo.subtitle2" Class="fw-bold">Protein</MudText>
                        <div class="d-flex align-items-center">
                            <MudText Class="me-2">@taken.TotalProtein g</MudText>
                            <MudText Color="@GetDiffColorEnum(target?.TotalProtein ?? 0, taken.TotalProtein)">
                                (@GetProgressLabel(target?.TotalProtein ?? 0, taken.TotalProtein))
                            </MudText>
                        </div>
                        <MudProgressLinear Color="Color.Success"
                                           Value="GetProgressPercent(target?.TotalProtein ?? 0, taken.TotalProtein)"
                                           Buffer="false" />
                    </div>
                    @* Yağ *@
                    <div class="col-md-3 mb-3">
                        <MudText Typo="Typo.subtitle2" Class="fw-bold">Yağ</MudText>
                        <div class="d-flex align-items-center">
                            <MudText Class="me-2">@taken.TotalFat g</MudText>
                            <MudText Color="@GetDiffColorEnum(target?.TotalFat ?? 0, taken.TotalFat)">
                                (@GetProgressLabel(target?.TotalFat ?? 0, taken.TotalFat))
                            </MudText>
                        </div>
                        <MudProgressLinear Color="Color.Error"
                                           Value="GetProgressPercent(target?.TotalFat ?? 0, taken.TotalFat)"
                                           Buffer="false" />
                    </div>
                </div>
            </MudCardContent>
        </MudPaper>
    }
}

@code {
    private bool loaded;
    List<NutritionSummaryDto> MealSummaries = new();
    DailyMacroResponseModel dailyMacro;
    private IEnumerable<IGrouping<int, NutritionSummaryDto>> groups =>
        MealSummaries
            .GroupBy(x => x.DailyMealTime)
            .OrderBy(g => g.Key);

    // Hedef sözlüğü (isteğe göre servis’den de çekilebilir)
    private readonly Dictionary<int, NutritionSummaryDto> mealTargets = new Dictionary<int, NutritionSummaryDto>
    {
        { 0, new NutritionSummaryDto{ DailyMealTime=0, TotalKcal=500, TotalCarbohydrate=50, TotalProtein=20, TotalFat=10 } },
        { 1, new NutritionSummaryDto{ DailyMealTime=1, TotalKcal=600, TotalCarbohydrate=60, TotalProtein=25, TotalFat=15 } },
        { 2, new NutritionSummaryDto{ DailyMealTime=2, TotalKcal=700, TotalCarbohydrate=70, TotalProtein=30, TotalFat=20 } },
        //… eğer daha fazla varsa ekleyebilirsin
    };

    // Genel özet kartları için
    private Dictionary<string,(decimal Amount,string Unit,string BgColor)> overallTargets;
    private Dictionary<string,(decimal Amount,string Unit,string BgColor)> overallTaken;

    protected override async Task OnInitializedAsync()
    {
        dailyMacro      = await dailyMacroService.GetDailyMacroByUserId(1);
        MealSummaries   = await dailyNutritionDetailsService.GetTotalMeal(1);

        // GENEL ÖZET: hedefler
        overallTargets = new()
        {
            ["Kalori"]       = (dailyMacro.Calories,       "Kcal",   "bg-warning"),
            ["Karbonhidrat"] = (dailyMacro.Carbohydrates,   "g",      "bg-info"),
            ["Protein"]      = (dailyMacro.Proteins,        "g",      "bg-success"),
            ["Yağ"]          = (dailyMacro.Fats,            "g",      "bg-danger"),
        };

        // GENEL ÖZET: alınan
        overallTaken = new()
        {
            ["Kalori"]       = (MealSummaries.Sum(x=>x.TotalKcal),            "Kcal", "bg-warning"),
            ["Karbonhidrat"] = (MealSummaries.Sum(x=>x.TotalCarbohydrate),    "g",    "bg-info"),
            ["Protein"]      = (MealSummaries.Sum(x=>x.TotalProtein),         "g",    "bg-success"),
            ["Yağ"]          = (MealSummaries.Sum(x=>x.TotalFat),             "g",    "bg-danger"),
        };

        loaded = true;
    }

    string GetProgressLabel(decimal target, decimal actual)
        => actual < target ? "Eksik" : actual > target ? "Fazla" : "İdeal";

    string GetDiffColor(decimal target, decimal actual)
        => actual < target ? "text-danger" : actual > target ? "text-warning" : "text-success";

    private double GetProgressPercent(decimal target, decimal actual)
    {
        if (target == 0) return 0;
        var percentage = (double)(actual / target * 100);
        return percentage > 100 ? 100 : percentage;
    }

    MudBlazor.Color GetDiffColorEnum(decimal target, decimal actual)
    => actual < target ? Color.Error
       : actual > target ? Color.Warning
       : Color.Success;
}
