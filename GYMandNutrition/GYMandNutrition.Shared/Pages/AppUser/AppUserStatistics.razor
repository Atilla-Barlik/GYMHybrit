@page "/exercise-statistics"
@using Entities.UserExerciseProgramEntities
@using System.Globalization
@using global::Services.StatisticServices



@* <h3 class="text-center my-4">📊 Egzersiz İstatistikleri</h3>

 @if (exerciseStatistics != null && exerciseStatistics.Any())
{
    var groupedData = exerciseStatistics.GroupBy(e => e.ExerciseId);

    @foreach (var exerciseGroup in groupedData)
    {
        <MudCard Class="mb-4">
            <MudCardHeader>
                <MudText Typo="Typo.h5" Class="text-primary">🏋️ @exerciseGroup.First().ExerciseName - İstatistik Grafiği</MudText>
            </MudCardHeader>
            <MudCardContent>
                <div>
                    <MudChart ChartType="MudBlazor.ChartType.Line" ChartSeries="@GetChartSeries(exerciseGroup)" XAxisLabels="@exerciseGroup.Select(e => e.DateFormatted).ToArray()" ChartOptions="_options" Width="100%" Height="350px" CanHideSeries></MudChart>
                    <MudSlider @bind-Value="_options.YAxisTicks" Min="0" Max="300" Step="1" Color="Color.Info">Y-Axis Ticks: @_options.YAxisTicks.ToString()</MudSlider>

                </div>
            </MudCardContent>

        </MudCard>
    }
}
else
{
    <p class="text-center text-muted">🔄 Egzersiz verileri yükleniyor...</p>
}


@code {
    [Inject] IStatisticService StatisticService { get; set; }
    private List<ExerciseStatisticsModel> exerciseStatistics;
    private readonly MudBlazor.ChartOptions _options = new() { YAxisTicks = 1};

    protected override async Task OnInitializedAsync()
    {
        exerciseStatistics = await StatisticService.GetAllExercisesStatistics();
        if (exerciseStatistics != null)
        {
            var random = new Random();
            DateOnly lastDate = DateOnly.MinValue;

            foreach (var item in exerciseStatistics)
            {
                if (item.Date == lastDate)
                {
                    // Aynı tarihli veriyi biraz farklılaştırıyoruz
                    item.Date = item.Date.AddDays(random.Next(1, 5));
                }
                lastDate = item.Date;
                item.DateFormatted = item.Date.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
            }

            foreach (var item in exerciseStatistics)
            {
                item.DateFormatted = DateTime.ParseExact(item.Date.ToString("yyyy-MM-dd"), "yyyy-MM-dd", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            }
        }

        StateHasChanged();        
    }

    private List<ChartSeries> GetChartSeries(IGrouping<int, ExerciseStatisticsModel> exerciseGroup)
    {
        return new List<ChartSeries>
        {
            new ChartSeries { Name = "🔄 Tekrar", Data = exerciseGroup.Select(e => (double)e.ExerciseRepeat).ToArray() },
            new ChartSeries { Name = "🔁 Set", Data = exerciseGroup.Select(e => (double)e.ExerciseSet).ToArray() },
            new ChartSeries { Name = "🏋️ Ağırlık (kg)", Data = exerciseGroup.Select(e => (double)e.ExerciseWeight).ToArray() },
        };
    }

}

<style>
    .mud-chart-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }
</style>  *@





@inject IStatisticService StatisticService
@inject IDailyNutritionService dailyNutritionService

<h3 class="text-center my-4">🍽️ Günlük Beslenme Trendleri</h3>

@if (allData is null)
{
    <p class="text-center text-muted">🔄 Beslenme verileri yükleniyor...</p>
}
else if (!allData.Any())
{
    <p class="text-center text-muted">📭 Henüz kapalı günlük beslenme verisi yok.</p>
}
else
{
    <MudGrid GutterSize="3">
        <!-- Kalori Grafiği -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Kalori Zaman Serisi</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudChart ChartType="MudBlazor.ChartType.Line"
                              ChartSeries="@calorieSeries"
                              XAxisLabels="@calorieLabels"
                              ChartOptions="_options_Kcal"
                              Width="100%" Height="300px" CanHideSeries/>
                    <div class="d-flex justify-space-between mt-2">
                        <MudButton Variant="Variant.Text" Disabled="@(caloriePage == 0)" OnClick="PrevCalorie">← Önceki</MudButton>
                        <MudText Typo="Typo.caption">Sayfa @caloriePage+1</MudText>
                        <MudButton Variant="Variant.Text" Disabled="@((caloriePage+1)*pageSize >= totalCount)" OnClick="NextCalorie">Sonraki →</MudButton>
                    </div>
                    <MudSlider @bind-Value="_options_Kcal.YAxisTicks" Min="0" Max="5000" Step="1" Color="Color.Info">Besin değer gösterimi: @_options_Kcal.YAxisTicks.ToString()</MudSlider>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Makro Grafiği -->
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Protein / Karbonhidrat / Yağ Zaman Serisi</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudChart ChartType="MudBlazor.ChartType.Line"
                              ChartSeries="@macroSeries"
                              XAxisLabels="@macroLabels"
                              ChartOptions="_options2"
                              Width="100%" Height="300px" CanHideSeries/>
                    <div class="d-flex justify-space-between mt-2">
                        <MudButton Variant="Variant.Text" Disabled="@(macroPage == 0)" OnClick="PrevMacro">← Önceki</MudButton>
                        <MudText Typo="Typo.caption">Sayfa @macroPage+1</MudText>
                        <MudButton Variant="Variant.Text" Disabled="@((macroPage+1)*pageSize >= totalCount)" OnClick="NextMacro">Sonraki →</MudButton>
                    </div>
                    <MudSlider @bind-Value="_options2.YAxisTicks" Min="0" Max="500" Step="1" Color="Color.Info">Besin değer gösterimi: @_options2.YAxisTicks.ToString()</MudSlider>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}

<h3 class="text-center my-4">📊 Egzersiz İstatistikleri</h3>

@if (exerciseStatistics != null && exerciseStatistics.Any())
{
    var groupedData = exerciseStatistics.GroupBy(e => e.ExerciseId);

    foreach (var exerciseGroup in groupedData)
    {
        var exerciseId = exerciseGroup.Key;
        var pageIndex = pageIndices.ContainsKey(exerciseId) ? pageIndices[exerciseId] : 0;
        var pagedData = exerciseGroup.Skip(pageIndex * pageSize).Take(pageSize).ToList();

        <MudCard Class="mb-4">
            <MudCardHeader>
                <MudText Typo="Typo.h5" Class="text-primary">🏋️ @exerciseGroup.First().ExerciseName - İstatistik Grafiği</MudText>
            </MudCardHeader>
            <MudCardContent>
                <div class="chart-fade">
                    <MudChart ChartType="MudBlazor.ChartType.Line"
                    ChartSeries="@GetChartSeries(pagedData)"
                    XAxisLabels="@pagedData.Select(e => e.DateFormatted).ToArray()"
                    ChartOptions="_options"
                    Width="100%" Height="350px" CanHideSeries>
                    </MudChart>
                </div>

                <p class="text-muted text-center mt-2">
                    Gösterilen Veri: @(GetStartIndex(exerciseId) + 1)–@((GetEndIndex(exerciseId, exerciseGroup.Count()))) / Toplam @exerciseGroup.Count()
                </p>

                <div class="d-flex justify-content-between mt-2">
                    <MudButton Variant="Variant.Text" Disabled="@(pageIndex == 0)" OnClick="@(() => ChangePage(exerciseId, -1))">
                        ⬅️ Önceki
                    </MudButton>
                    <MudButton Variant="Variant.Text" Disabled="@((pageIndex + 1) * pageSize >= exerciseGroup.Count())" OnClick="@(() => ChangePage(exerciseId, 1))">
                        Sonraki ➡️
                    </MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    }
}
else
{
    <p class="text-center text-muted">🔄 Egzersiz verileri yükleniyor...</p>
}

@code {
    private List<ExerciseStatisticsModel> exerciseStatistics;
    private readonly MudBlazor.ChartOptions _options = new() { YAxisTicks = 1 };
    private readonly MudBlazor.ChartOptions _options2 = new() { YAxisTicks = 1 };
    private readonly MudBlazor.ChartOptions _options_Kcal = new() { YAxisTicks = 1 };
    private int pageSize = 5;
    private Dictionary<int, int> pageIndices = new(); // exerciseId -> pageIndex

    private List<DailyNutritionResponseModel> nutritionData;
    private List<ChartSeries> nutritionSeries;
    private string[] nutritionDates;
    private List<DailyNutritionResponseModel> allData;
    private int pageSize2 = 5;
    private int totalCount => allData?.Count ?? 0;

    private int caloriePage = 0;
    private int macroPage = 0;

    private List<ChartSeries> calorieSeries = new();
    private string[] calorieLabels = Array.Empty<string>();

    private List<ChartSeries> macroSeries = new();
    private string[] macroLabels = Array.Empty<string>();
    protected override async Task OnInitializedAsync()
    {
        // 1) Beslenme verilerini çek ve hazırlık yap
        allData = await dailyNutritionService.GetClosedDailyNutritionListByUserId(1);
        // tarihlere göre artan sırala (API zaten artan sıralı döndürüyor, ekstra güvenlik için):
        allData = allData
            .OrderBy(n => n.Date)
            .ThenBy(n => n.DailyNutritionID)
            .ToList();

        UpdateCalorieChart();
        UpdateMacroChart();
        exerciseStatistics = await StatisticService.GetAllExercisesStatistics();

        if (exerciseStatistics != null)
        {
            var random = new Random();
            DateOnly lastDate = DateOnly.MinValue;

            foreach (var item in exerciseStatistics)
            {
                if (item.Date == lastDate)
                {
                    item.Date = item.Date.AddDays(random.Next(1, 5));
                }
                lastDate = item.Date;
                item.DateFormatted = item.Date.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
            }

            foreach (var item in exerciseStatistics)
            {
                item.DateFormatted = DateTime.ParseExact(item.Date.ToString("yyyy-MM-dd"), "yyyy-MM-dd", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            }

            // İlk sayfa indekslerini başlat
            foreach (var group in exerciseStatistics.GroupBy(e => e.ExerciseId))
            {
                pageIndices[group.Key] = 0;
            }
        }

        StateHasChanged();
    }

    private List<ChartSeries> GetChartSeries(List<ExerciseStatisticsModel> data)
    {
        return new List<ChartSeries>
        {
            new ChartSeries { Name = "🔄 Tekrar", Data = data.Select(e => (double)e.ExerciseRepeat).ToArray() },
            new ChartSeries { Name = "🔁 Set", Data = data.Select(e => (double)e.ExerciseSet).ToArray() },
            new ChartSeries { Name = "🏋️ Ağırlık (kg)", Data = data.Select(e => (double)e.ExerciseWeight).ToArray() },
        };
    }

    private void ChangePage(int exerciseId, int delta)
    {
        if (!pageIndices.ContainsKey(exerciseId)) pageIndices[exerciseId] = 0;

        pageIndices[exerciseId] += delta;
        StateHasChanged();
    }

    private int GetStartIndex(int exerciseId)
    {
        return pageIndices.TryGetValue(exerciseId, out var pageIndex)
            ? pageIndex * pageSize
            : 0;
    }

    private int GetEndIndex(int exerciseId, int totalCount)
    {
        var endIndex = GetStartIndex(exerciseId) + pageSize;
        return endIndex > totalCount ? totalCount : endIndex;
    }
    private void UpdateCalorieChart()
    {
        var pageData = allData
            .Skip(caloriePage * pageSize2)
            .Take(pageSize2)
            .ToList();

        calorieLabels = pageData.Select(d => d.Date.ToString("MM-dd")).ToArray();
        calorieSeries = new List<ChartSeries> {
            new ChartSeries {
                Name = "Kalori",
                Data = pageData.Select(d => (double)d.DailyNutritionTotalKcal).ToArray()
            }
        };
    }
    private void UpdateMacroChart()
    {
        var pageData = allData
            .Skip(macroPage * pageSize2)
            .Take(pageSize2)
            .ToList();

        macroLabels = pageData.Select(d => d.Date.ToString("MM-dd")).ToArray();
        macroSeries = new List<ChartSeries> {
            new ChartSeries {
                Name = "Protein",
                Data = pageData.Select(d => (double)d.DailyNutritionTotalProtein).ToArray()
            },
            new ChartSeries {
                Name = "Karb.",
                Data = pageData.Select(d => (double)d.DailyNutritionTotalCarbohydrate).ToArray()
            },
            new ChartSeries {
                Name = "Yağ",
                Data = pageData.Select(d => (double)d.DailyNutritionTotalFat).ToArray()
            }
        };
    }

    private void PrevCalorie()
    {
        if (caloriePage > 0) caloriePage--;
        UpdateCalorieChart();
    }

    private void NextCalorie()
    {
        if ((caloriePage + 1) * pageSize < totalCount) caloriePage++;
        UpdateCalorieChart();
    }

    private void PrevMacro()
    {
        if (macroPage > 0) macroPage--;
        UpdateMacroChart();
    }

    private void NextMacro()
    {
        if ((macroPage + 1) * pageSize < totalCount) macroPage++;
        UpdateMacroChart();
    }
}

<style>
    .mud-chart-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }

    .chart-fade {
        animation: fadeInChart 0.5s ease-in-out;
    }

    @@keyframes fadeInChart {
        0%

    {
        opacity: 0;
        transform: translateY(20px);
    }

    100% {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .mud-chart-container text {
        font-size: 1rem !important;
        font-weight: 600 !important;
        fill: #333 !important;
    }

</style>

