@* @page "/UserExerciseList"
@using Entities.AppUserExerciseProgramEntities
@using Entities.UserExerciseProgramEntities
@using global::Services.AppUserExerciseProgramServise
@inject NavigationManager navigationManager;
<h3>Egzersiz Programları</h3>

@if (combinedExerciseDataResponseModels != null)
{
    <div class="container mt-4">
        @if (combinedExerciseDataResponseModels != null && combinedExerciseDataResponseModels.Any())
        {
            foreach (var group in GroupedExercises)
            {
                // Get a representative exercise from the group
                <div class="card mb-3">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span>Program No: @group.Key - Toplam Egzersiz: @group.Count()</span>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteByDayNo(group.Key)">
                            X
                        </button>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Egzersizler</h5>
                        <div class="row">
                            @foreach (var exercise in group)
                            {
                                <div class="col-md-4 mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <a href="javascript:void(0)" data-bs-toggle="modal" data-bs-target="#exerciseModal"
                                           @onclick="() => OpenModal(exercise)" class="me-2">
                                            @exercise.ExerciseDetailDto.Name
                                        </a>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteExercise(exercise)">
                                            X
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                        <a href="@group.First().ExerciseDetailDto.Gif1" class="btn btn-primary" target="_blank">View First Exercise GIF</a>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No exercises found.</p>
        }
    </div>
}
else
{
    <p>Loading exercise data...</p>
}
<!-- Modal -->
@if (selectedExercise != null && selectedExercise.ExerciseDetailDto != null)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block; background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedExercise.ExerciseDetailDto.Name</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => selectedExercise = null"></button>
                </div>
                <div class="modal-body">
                    <!-- Display exercise details -->
                    <div class="text-center mb-3">
                        <video width="100%" controls>
                            <source src="@selectedExercise.ExerciseDetailDto.Gif1" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <video width="100%" controls class="mt-2">
                            <source src="@selectedExercise.ExerciseDetailDto.Gif2" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    </div>
                    <div class="mb-3">
                        <strong>Egzersiz İsmi: </strong> @selectedExercise.ExerciseDetailDto.Name
                    </div>
                    <div class="mb-3">
                        <strong>Yakılan Kalori (Avg): </strong> @selectedExercise.ExerciseDetailDto.AverageKcal
                    </div>
                    <div class="mb-3">
                        <strong>Zorluk Seviyesi: </strong> @selectedExercise.ExerciseDetailDto.Difficulty
                    </div>
                    <div class="mb-3">
                        <strong>Ekipman: </strong> @selectedExercise.ExerciseDetailDto.Equipment
                    </div>
                    <div class="mb-3">
                        <strong>Nasıl Uygulanır?</strong>
                    </div>
                    <div class="mb-3">
                        <strong>Adım 1: </strong> @selectedExercise.ExerciseDetailDto.Description1
                    </div>
                    <div class="mb-3">
                        <strong>Adım 2: </strong> @selectedExercise.ExerciseDetailDto.Description2
                    </div>
                    <div class="mb-3">
                        @if (selectedExercise.ExerciseDetailDto.Description3 != null)
                        {
                            <strong>Adım 3: </strong> @selectedExercise.ExerciseDetailDto.Description3
                        }
                    </div>

                    <!-- Editable fields for sets and repeats -->
                    <div class="form-group">
                        <label for="exerciseRepeat">Tekrar Sayısı</label>
                        <input type="number" id="exerciseRepeat" class="form-control" @bind="selectedExercise.ExerciseRepeat" />
                    </div>
                    <div class="form-group mt-3">
                        <label for="exerciseSet">Set Sayısı</label>
                        <input type="number" id="exerciseSet" class="form-control" @bind="selectedExercise.ExerciseSet" />
                    </div>
                    <div class="form-group mt-3">
                        <label for="exerciseSet">Ağırlık</label>
                        <input type="number" id="exerciseSet" class="form-control" @bind="selectedExercise.ExerciseWeight" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => selectedExercise = null">Kapat</button>
                    <button type="button" class="btn btn-primary" @onclick=" () =>SaveChanges(selectedExercise)">Değişiklikleri Kaydet</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Inject] IAppUserExerciseProgramService appUserExerciseProgramService { get; set; }
    private List<CombinedExerciseDataResponseModel> combinedExerciseDataResponseModels;
    private List<CombinedExerciseDataResponseModel> localCombinedExerciseProgramData;
    private List<int> distinctDays;
    private ExerciseDetailResponseModel selectedExerciseDetail;
    CombinedExerciseDataResponseModel selectedExercise = null;
    AddUpdateAppUserExerciseProgramRequest addUpdateAppUserExerciseProgramRequest;
    protected override async Task OnInitializedAsync()
    {
        combinedExerciseDataResponseModels = await appUserExerciseProgramService.GetAppUserExerciseProgramDetails(1);
        localCombinedExerciseProgramData = combinedExerciseDataResponseModels;
        distinctDays = localCombinedExerciseProgramData.Select(e => e.DayNo).Distinct().ToList();

    }
    private IEnumerable<IGrouping<int, CombinedExerciseDataResponseModel>> GroupedExercises =>
        localCombinedExerciseProgramData.GroupBy(e => e.DayNo);

    void OpenModal(CombinedExerciseDataResponseModel exercise)
    {
        selectedExercise = exercise;
    }
    void SaveChanges(CombinedExerciseDataResponseModel combinedData)
    {
        addUpdateAppUserExerciseProgramRequest = new AddUpdateAppUserExerciseProgramRequest
        {
            AppUserExerciseProgramId = combinedData.AppUserExerciseProgramId,
            ExerciseRepeat = combinedData.ExerciseRepeat,
            ExerciseSet = combinedData.ExerciseSet,
            ExerciseWeight = combinedData.ExerciseWeight,
            ExerciseTotalBurnedKcal = combinedData.ExerciseTotalBurnedKcal,
            ExerciseDetailId = combinedData.ExerciseDetailDto.ExerciseDetailId,
            AppUserId = combinedData.AppUserId,
            DayNo = combinedData.DayNo,
            Date = combinedData.Date
        };

        appUserExerciseProgramService.UpdateAppUserExerciseProgram(addUpdateAppUserExerciseProgramRequest);
        // set ve tekrar sayılarını güncelleme veya yeni kayıt alma işlemi gerçekleştirilecek
        //Console.WriteLine($"Saved: {selectedExercise.ExerciseRepeat} repeats, {selectedExercise.ExerciseSet} sets");
    }
    void DeleteExercise(CombinedExerciseDataResponseModel exercise)
    {
        localCombinedExerciseProgramData.Remove(exercise);
        addUpdateAppUserExerciseProgramRequest = new AddUpdateAppUserExerciseProgramRequest
            {
                AppUserExerciseProgramId = exercise.AppUserExerciseProgramId,
                ExerciseRepeat = exercise.ExerciseRepeat,
                ExerciseSet = exercise.ExerciseSet,
                ExerciseWeight = exercise.ExerciseWeight,
                ExerciseTotalBurnedKcal = exercise.ExerciseTotalBurnedKcal,
                ExerciseDetailId = exercise.ExerciseDetailDto.ExerciseDetailId,
                AppUserId = exercise.AppUserId,
                DayNo = exercise.DayNo,
                Date = exercise.Date
            };
        appUserExerciseProgramService.DeleteAppUserExerciseProgram(addUpdateAppUserExerciseProgramRequest);

        //exercises.Remove(exercise);
        // You can also make an API call here to delete the exercise from the database
        //StateHasChanged();
    }

    void DeleteByDayNo(int dayNo)
    {
        
        localCombinedExerciseProgramData.RemoveAll(q=>q.DayNo == dayNo);
        
        appUserExerciseProgramService.DeleteAppUserExerciseProgramByDyNo(dayNo);
    }
}
<style>
    .exercise-item {
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 5px;
        text-align: center;
}
</style> *@


@* @page "/UserExerciseList"
@using Entities.AppUserExerciseProgramEntities
@using Entities.UserExerciseProgramEntities
@using global::Services.AppUserExerciseProgramServise
@inject NavigationManager navigationManager;

<h3 class="text-center my-4">🏋️ Egzersiz Programları</h3>

@if (combinedExerciseDataResponseModels != null)
{
    <div class="container mt-4">
        @if (combinedExerciseDataResponseModels.Any())
        {
            foreach (var group in GroupedExercises)
            {
                <div class="card mb-4 shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
                        <h5 class="mb-0">📅 Program No: @group.Key - 🏋️ Toplam Egzersiz: @group.Count()</h5>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteByDayNo(group.Key)">❌</button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var exercise in group)
                            {
                                <div class="col-md-4">
                                    <div class="card exercise-card">
                                        <div class="card-body">
                                            <h6 class="card-title text-center">🏋️ @exercise.ExerciseDetailDto.Name</h6>
                                            <ul class="list-group list-group-flush">
                                                <li class="list-group-item">🔄 Set: <strong>@exercise.ExerciseSet</strong></li>
                                                <li class="list-group-item">🔁 Tekrar: <strong>@exercise.ExerciseRepeat</strong></li>
                                                <li class="list-group-item">🏋️ Ağırlık: <strong>@exercise.ExerciseWeight kg</strong></li>
                                                <li class="list-group-item">🔥 Yakılan Kalori: <strong>@exercise.ExerciseTotalBurnedKcal kcal</strong></li>
                                            </ul>
                                            <div class="d-flex justify-content-between mt-3">
                                                <a href="@exercise.ExerciseDetailDto.Gif1" class="btn btn-sm btn-primary" target="_blank">🎥 GIF İzle</a>
                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteExercise(exercise)">🗑️ Sil</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p class="text-center text-muted">🚫 Henüz egzersiz eklenmedi.</p>
        }
    </div>
}
else
{
    <p class="text-center">⏳ Egzersiz verileri yükleniyor...</p>
}

<style>
    .exercise-card {
        border-radius: 10px;
        transition: transform 0.2s ease-in-out;
    }

        .exercise-card:hover {
            transform: scale(1.05);
        }
</style>

@code {
    [Inject] IAppUserExerciseProgramService appUserExerciseProgramService { get; set; }
    private List<CombinedExerciseDataResponseModel> combinedExerciseDataResponseModels;
    private List<CombinedExerciseDataResponseModel> localCombinedExerciseProgramData;
    private List<int> distinctDays;
    protected override async Task OnInitializedAsync()
    {
        combinedExerciseDataResponseModels = await appUserExerciseProgramService.GetAppUserExerciseProgramDetails(1);
        localCombinedExerciseProgramData = combinedExerciseDataResponseModels;
        distinctDays = localCombinedExerciseProgramData.Select(e => e.DayNo).Distinct().ToList();
    }

    private IEnumerable<IGrouping<int, CombinedExerciseDataResponseModel>> GroupedExercises =>
        localCombinedExerciseProgramData.GroupBy(e => e.DayNo);

    void DeleteExercise(CombinedExerciseDataResponseModel exercise)
    {
        localCombinedExerciseProgramData.Remove(exercise);
        appUserExerciseProgramService.DeleteAppUserExerciseProgram(new AddUpdateAppUserExerciseProgramRequest
            {
                AppUserExerciseProgramId = exercise.AppUserExerciseProgramId,
                ExerciseRepeat = exercise.ExerciseRepeat,
                ExerciseSet = exercise.ExerciseSet,
                ExerciseWeight = exercise.ExerciseWeight,
                ExerciseTotalBurnedKcal = exercise.ExerciseTotalBurnedKcal,
                ExerciseDetailId = exercise.ExerciseDetailDto.ExerciseDetailId,
                AppUserId = exercise.AppUserId,
                DayNo = exercise.DayNo,
                Date = exercise.Date
            });
    }

    void DeleteByDayNo(int dayNo)
    {
        localCombinedExerciseProgramData.RemoveAll(q => q.DayNo == dayNo);
        appUserExerciseProgramService.DeleteAppUserExerciseProgramByDyNo(dayNo);
    }
} *@

@* @page "/UserExerciseList"
@using Entities.AppUserExerciseProgramEntities
@using Entities.UserExerciseProgramEntities
@using global::Services.AppUserExerciseProgramServise
@inject NavigationManager navigationManager;

<h3 class="text-center my-4">🏋️ Egzersiz Programları</h3>

@if (combinedExerciseDataResponseModels != null)
{
    <div class="container mt-4">
        @if (combinedExerciseDataResponseModels.Any())
        {
            foreach (var group in GroupedExercises)
            {
                var totalCalories = group.Sum(ex => ex.ExerciseTotalBurnedKcal);
                <div class="card mb-4 shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
                        <h5 class="mb-0">📅 Program No: @group.Key - 🏋️ Toplam Egzersiz: @group.Count() - 🔥 Toplam Kalori: @totalCalories kcal</h5>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteByDayNo(group.Key)">❌</button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var exercise in group)
                            {
                                <div class="col-md-4">
                                    <div class="card exercise-card">
                                        <div class="card-body">
                                            <h6 class="card-title text-center">🏋️ @exercise.ExerciseDetailDto.Name</h6>
                                            <ul class="list-group list-group-flush">
                                                <li class="list-group-item">🔄 Set: <strong>@exercise.ExerciseSet</strong></li>
                                                <li class="list-group-item">🔁 Tekrar: <strong>@exercise.ExerciseRepeat</strong></li>
                                                <li class="list-group-item">🏋️ Ağırlık: <strong>@exercise.ExerciseWeight kg</strong></li>
                                                <li class="list-group-item">🔥 Yakılan Kalori: <strong>@exercise.ExerciseTotalBurnedKcal kcal</strong></li>
                                            </ul>
                                            <div class="d-flex justify-content-between mt-3">
                                                <button class="btn btn-sm btn-info" @onclick="() => OpenModal(exercise)">ℹ️ Ayrıntıları Göster</button>
                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteExercise(exercise)">🗑️ Sil</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p class="text-center text-muted">🚫 Henüz egzersiz eklenmedi.</p>
        }
    </div>
}
else
{
    <p class="text-center">⏳ Egzersiz verileri yükleniyor...</p>
}

@if (selectedExercise != null && selectedExercise.ExerciseDetailDto != null)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block; background-color: rgba(0, 0, 0, 0.7);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content border-0 rounded-lg shadow-lg">
                <div class="modal-header bg-gradient text-white" style="background: linear-gradient(135deg, #36d1dc, #5b86e5);">
                    <h5 class="modal-title font-weight-bold">@selectedExercise.ExerciseDetailDto.Name</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => CloseModal()"></button>
                </div>
                <div class="modal-body text-center">
                    <video width="100%" controls class="rounded shadow">
                        <source src="@selectedExercise.ExerciseDetailDto.Gif1" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    <video width="100%" controls class="mt-2 rounded shadow">
                        <source src="@selectedExercise.ExerciseDetailDto.Gif2" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    <div class="mt-4 p-3 bg-light rounded shadow-sm">
                        <h6 class="mb-3">📌@selectedExercise.ExerciseDetailDto.Name Egzersiz Bilgileri</h6>

                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span class="fw-bold">🔁 Set Sayısı:</span>
                            <div class="input-group w-50">
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => selectedExercise.ExerciseSet--">-</button>
                                <input type="number" class="form-control text-center" @bind="selectedExercise.ExerciseSet" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => selectedExercise.ExerciseSet++">+</button>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span class="fw-bold">🔄 Tekrar Sayısı:</span>
                            <div class="input-group w-50">
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => selectedExercise.ExerciseRepeat--">-</button>
                                <input type="number" class="form-control text-center" @bind="selectedExercise.ExerciseRepeat" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => selectedExercise.ExerciseRepeat++">+</button>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span class="fw-bold">🏋️ Ağırlık (kg):</span>
                            <div class="input-group w-50">
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => selectedExercise.ExerciseWeight--">-</button>
                                <input type="number" class="form-control text-center" @bind="selectedExercise.ExerciseWeight" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => selectedExercise.ExerciseWeight++">+</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <button type="button" class="btn btn-secondary shadow-sm" @onclick="() => CloseModal()">Kapat</button>
                    <button type="button" class="btn btn-primary shadow-sm" @onclick="() => SaveChanges(selectedExercise)">💾 Değişiklikleri Kaydet</button>
                    @if (showSuccessPopup)
                    {
                        <div class="alert alert-success text-center position-fixed bottom-0 start-0 m-3" role="alert">
                            ✅ Değişiklikler başarıyla kaydedildi!
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

<style>
    .exercise-card {
        border-radius: 10px;
        transition: transform 0.2s ease-in-out;
    }

        .exercise-card:hover {
            transform: scale(1.05);
            transition: all 0.3s ease-in-out;
        }

</style>

@code {
    private CombinedExerciseDataResponseModel selectedExercise;
    private bool showSuccessPopup = false;
    void OpenModal(CombinedExerciseDataResponseModel exercise)
    {
        selectedExercise = exercise;
    }

    [Inject] IAppUserExerciseProgramService appUserExerciseProgramService { get; set; }
    private List<CombinedExerciseDataResponseModel> combinedExerciseDataResponseModels;
    private List<CombinedExerciseDataResponseModel> localCombinedExerciseProgramData;
    AddUpdateAppUserExerciseProgramRequest addUpdateAppUserExerciseProgramRequest;
    private List<int> distinctDays;
    protected override async Task OnInitializedAsync()
    {
        combinedExerciseDataResponseModels = await appUserExerciseProgramService.GetAppUserExerciseProgramDetails(1);
        localCombinedExerciseProgramData = combinedExerciseDataResponseModels;
        distinctDays = localCombinedExerciseProgramData.Select(e => e.DayNo).Distinct().ToList();
    }

    private IEnumerable<IGrouping<int, CombinedExerciseDataResponseModel>> GroupedExercises =>
        localCombinedExerciseProgramData.GroupBy(e => e.DayNo);

    void DeleteExercise(CombinedExerciseDataResponseModel exercise)
    {
        localCombinedExerciseProgramData.Remove(exercise);
        appUserExerciseProgramService.DeleteAppUserExerciseProgram(new AddUpdateAppUserExerciseProgramRequest
            {
                AppUserExerciseProgramId = exercise.AppUserExerciseProgramId,
                ExerciseRepeat = exercise.ExerciseRepeat,
                ExerciseSet = exercise.ExerciseSet,
                ExerciseWeight = exercise.ExerciseWeight,
                ExerciseTotalBurnedKcal = exercise.ExerciseTotalBurnedKcal,
                ExerciseDetailId = exercise.ExerciseDetailDto.ExerciseDetailId,
                AppUserId = exercise.AppUserId,
                DayNo = exercise.DayNo,
                Date = exercise.Date
            });
    }

    void DeleteByDayNo(int dayNo)
    {
        localCombinedExerciseProgramData.RemoveAll(q => q.DayNo == dayNo);
        appUserExerciseProgramService.DeleteAppUserExerciseProgramByDyNo(dayNo);
    }
    async void SaveChanges(CombinedExerciseDataResponseModel combinedData)
    {
        if(combinedData != null)
        {
            addUpdateAppUserExerciseProgramRequest = new AddUpdateAppUserExerciseProgramRequest
                {
                    AppUserExerciseProgramId = combinedData.AppUserExerciseProgramId,
                    ExerciseRepeat = combinedData.ExerciseRepeat,
                    ExerciseSet = combinedData.ExerciseSet,
                    ExerciseWeight = combinedData.ExerciseWeight,
                    ExerciseTotalBurnedKcal = combinedData.ExerciseTotalBurnedKcal,
                    ExerciseDetailId = combinedData.ExerciseDetailDto.ExerciseDetailId,
                    AppUserId = combinedData.AppUserId,
                    DayNo = combinedData.DayNo,
                    Date = combinedData.Date
                };

            appUserExerciseProgramService.UpdateAppUserExerciseProgram(addUpdateAppUserExerciseProgramRequest);
            showSuccessPopup = true;
            StateHasChanged(); // Popup'ı hemen göster
            await Task.Delay(2000); // 2 saniye beklet
            showSuccessPopup = false;

            
            CloseModal(); // Modalı kapat

        }
        else
        {
            return;
        }


    }

    async Task ReloadExerciseData()
    {
        combinedExerciseDataResponseModels = await appUserExerciseProgramService.GetAppUserExerciseProgramDetails(1);
        localCombinedExerciseProgramData = combinedExerciseDataResponseModels;
        StateHasChanged();
    }

    async void CloseModal()
    {
        selectedExercise = null;
        StateHasChanged();
        await ReloadExerciseData(); // Listeyi güncelle
    }
} *@
@page "/UserExerciseList"
@using Entities.AppUserExerciseProgramEntities
@using Entities.UserExerciseProgramEntities
@using global::Services.AppUserExerciseProgramServise
@inject NavigationManager navigationManager
@inject IAppUserExerciseProgramService appUserExerciseProgramService
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">🏋️ Egzersiz Programları</MudText>

    @if (GroupedExercises.Any())
    {
        @foreach (var group in GroupedExercises)
        {
            var totalCalories = group.Where(ex=>ex.ExerciseDone).Sum(ex => ex.ExerciseTotalBurnedKcal);
            <MudPaper Class="mb-5" Elevation="3" >
                <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="p-3 text-white rounded-top" Style="background-color: #5E35B1;">
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Bookmarks" /> Program No: @group.Key
                        <MudIcon Icon="@Icons.Material.Filled.Edit" /> Egzersiz Sayısı: @group.Count()
                        <MudIcon Icon="@Icons.Material.Filled.Whatshot" /> Toplam Kalori: @totalCalories kcal
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteByDayNo(group.Key)" />
                    </MudText>
                    
                </MudStack>

                <MudGrid Class="p-3">
                    @foreach (var exercise in group)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard Class="h-100 hover:shadow-lg" Style=@($"background-color:{(exercise.ExerciseDone ? "#d4edda" : "#f8d7da")}")>
                                <MudIconButton Icon="@(exercise.ExerciseDone ? Icons.Material.Filled.Remove : Icons.Material.Filled.Add)"
                                               Color="Color.Primary"
                                               Size="Size.Medium"
                                               OnClick="@(() => ToggleDone(exercise))" />
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true">🏋️ @exercise.ExerciseDetailDto.Name</MudText>
                                    <MudList T="string" Dense="true">
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Repeat">Set: <b>@exercise.ExerciseSet</b></MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Replay">Tekrar: <b>@exercise.ExerciseRepeat</b></MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.FitnessCenter">Ağırlık: <b>@exercise.ExerciseWeight kg</b></MudListItem>
                                        <MudListItem T="string" Icon="@Icons.Material.Filled.Whatshot">Kalori: <b>@exercise.ExerciseTotalBurnedKcal kcal</b></MudListItem>
                                    </MudList>
                                </MudCardContent>
                                <MudCardActions Class="d-flex justify-content-between">
                                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="() => OpenModal(exercise)">Ayrıntılar</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteExercise(exercise)">Sil</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
            
        }
    }
    else
    {
        <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Secondary">Henüz egzersiz verisi bulunamadı.</MudText>
    }
</MudContainer>

@if (modalVisible && selectedExercise != null)
{
    <div class="mud-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; justify-content: center; align-items: center;">
        <MudPaper Class="p-4" MaxWidth="MaxWidth.Medium" Style="background:white; position:relative; z-index:1060; width: 80%; max-height: 90vh; overflow-y: auto; border-radius: 10px;">
            <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true">@selectedExercise.ExerciseDetailDto.Name Egzersiz Detayı</MudText>
            <MudDivider Class="mb-3" />

            <MudGrid GutterSize="3">
                <MudItem xs="12" sm="6">
                    <video width="100%" controls style="border-radius: 8px;">
                        <source src="@selectedExercise.ExerciseDetailDto.Gif1" type="video/mp4" />
                    </video>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <video width="100%" controls style="border-radius: 8px;">
                        <source src="@selectedExercise.ExerciseDetailDto.Gif2" type="video/mp4" />
                    </video>
                </MudItem>

                <MudItem xs="12">
                    <MudGrid Spacing="2">
                        <MudItem xs="12" sm="4">
                            <MudNumericField Label="Set Sayısı" Variant="Variant.Outlined" @bind-Value="selectedExercise.ExerciseSet"  />
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudNumericField T="int" Label="Tekrar Sayısı" Variant="Variant.Outlined" @bind-Value="selectedExercise.ExerciseRepeat" />
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudNumericField T="decimal" Label="Ağırlık (kg)" Variant="Variant.Outlined" @bind-Value="selectedExercise.ExerciseWeight"   />
                        </MudItem>
                    </MudGrid>
                </MudItem>

                <MudItem xs="12">
                    
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Style="min-width: 50px;" OnClick="CloseModal">Kapat</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="min-width: 50px;" OnClick="() => SaveChanges(selectedExercise)">Kaydet</MudButton>
                    
                </MudItem>
            </MudGrid>
        </MudPaper>
    </div>
    
}


@code {
    private CombinedExerciseDataResponseModel selectedExercise;
    private bool modalVisible;
    private List<CombinedExerciseDataResponseModel> combinedExerciseDataResponseModels;
    private List<CombinedExerciseDataResponseModel> localCombinedExerciseProgramData;

    protected override async Task OnInitializedAsync()
    {
        combinedExerciseDataResponseModels = await appUserExerciseProgramService.GetAppUserExerciseProgramDetails(1);
        localCombinedExerciseProgramData = combinedExerciseDataResponseModels;
    }

    private IEnumerable<IGrouping<int, CombinedExerciseDataResponseModel>> GroupedExercises =>
        localCombinedExerciseProgramData?.GroupBy(e => e.DayNo) ?? Enumerable.Empty<IGrouping<int, CombinedExerciseDataResponseModel>>();

    void OpenModal(CombinedExerciseDataResponseModel exercise)
    {
        selectedExercise = exercise;
        modalVisible = true;
    }

    async void SaveChanges(CombinedExerciseDataResponseModel combinedData)
    {
        if (combinedData == null) return;

        var request = new AddUpdateAppUserExerciseProgramRequest
        {
            AppUserExerciseProgramId = combinedData.AppUserExerciseProgramId,
            ExerciseRepeat = combinedData.ExerciseRepeat,
            ExerciseSet = combinedData.ExerciseSet,
            ExerciseWeight = combinedData.ExerciseWeight,
            ExerciseDone = combinedData.ExerciseDone,
            ExerciseTotalBurnedKcal = combinedData.ExerciseTotalBurnedKcal,
            ExerciseDetailId = combinedData.ExerciseDetailDto.ExerciseDetailId,
            AppUserId = combinedData.AppUserId,
            DayNo = combinedData.DayNo,
            Date = combinedData.Date
        };

        await appUserExerciseProgramService.UpdateAppUserExerciseProgram(request);
        CloseModal();
        await ReloadExerciseData();
    }

    void DeleteExercise(CombinedExerciseDataResponseModel exercise)
    {
        localCombinedExerciseProgramData.Remove(exercise);
        appUserExerciseProgramService.DeleteAppUserExerciseProgram(new AddUpdateAppUserExerciseProgramRequest
        {
            AppUserExerciseProgramId = exercise.AppUserExerciseProgramId,
            ExerciseRepeat = exercise.ExerciseRepeat,
            ExerciseSet = exercise.ExerciseSet,
            ExerciseWeight = exercise.ExerciseWeight,
            ExerciseDone = exercise.ExerciseDone,
            ExerciseTotalBurnedKcal = exercise.ExerciseTotalBurnedKcal,
            ExerciseDetailId = exercise.ExerciseDetailDto.ExerciseDetailId,
            AppUserId = exercise.AppUserId,
            DayNo = exercise.DayNo,
            Date = exercise.Date
        });
    }

    void DeleteByDayNo(int dayNo)
    {
        localCombinedExerciseProgramData.RemoveAll(e => e.DayNo == dayNo);
        appUserExerciseProgramService.DeleteAppUserExerciseProgramByDyNo(dayNo);
    }

    void CloseModal()
    {
        modalVisible = false;
        selectedExercise = null;
    }

    async Task ReloadExerciseData()
    {
        combinedExerciseDataResponseModels = await appUserExerciseProgramService.GetAppUserExerciseProgramDetails(1);
        localCombinedExerciseProgramData = combinedExerciseDataResponseModels;
        StateHasChanged();
    }

    private async Task ToggleDone(CombinedExerciseDataResponseModel ex)
    {
        // 1) UI’da anında değişsin
        ex.ExerciseDone = !ex.ExerciseDone;

        // 2) DB’ye güncelle
        var req = new AddUpdateAppUserExerciseProgramRequest
            {
                AppUserExerciseProgramId = ex.AppUserExerciseProgramId,
                ExerciseSet = ex.ExerciseSet,
                ExerciseRepeat = ex.ExerciseRepeat,
                ExerciseWeight = ex.ExerciseWeight,
                ExerciseDone = ex.ExerciseDone,
                ExerciseTotalBurnedKcal = ex.ExerciseTotalBurnedKcal,
                ExerciseDetailId = ex.ExerciseDetailDto.ExerciseDetailId,
                AppUserId = ex.AppUserId,
                DayNo = ex.DayNo,
                Date = ex.Date
            };
        await appUserExerciseProgramService.UpdateAppUserExerciseProgram(req);

        // 3) isteğe bağlı: veriyi yeniden yükle
        // await ReloadExerciseData();
    }
}
