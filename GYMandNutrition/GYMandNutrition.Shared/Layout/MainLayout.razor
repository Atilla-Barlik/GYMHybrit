@using global::Services.LocalAuthStateProviderServices
@inherits LayoutComponentBase
@inject LocalAuthStateProvider user
<header>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />


</header>

<body>
    <MudThemeProvider />
    <MudPopoverProvider />
    <MudSnackbarProvider />
    <MudDialogProvider />

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>



</body>
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main style="background-color:#f7f7f7">
        <MudContainer MaxWidth="MaxWidth.False" Class="px-4">
     <MudStack Row ="true"
               Justify="Justify.FlexEnd"
                AlignItems="AlignItems.Center"
                Spacing="2"
               Class="border-dark">
        <AuthorizeView>
          <Authorized>
                        <MudButton EndIcon="@Icons.Material.Filled.Person" Href="userProfile">Profil</MudButton>
                        <MudButton EndIcon="@Icons.Material.Filled.ExitToApp" OnClick="Logout">
                         Çıkış Yap
                        </MudButton>
          </Authorized>
          <NotAuthorized>
                        <MudButton StartIcon="@Icons.Material.Filled.Login" Href="login">Giriş Yap</MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.PersonAddAlt1" Href="register">Kaydol</MudButton>
         </NotAuthorized>
        </AuthorizeView>

        <MudText Typo="Typo.body2">
         Benim Kullanıcı ID’m: @user.CurrentUserId
        </MudText>
      </MudStack>
    </MudContainer>
       
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@code {
    [Inject] AuthenticationStateProvider AuthStateProvider { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] AuthenticationStateProvider AuthProv { get; set; }
    
    
    private async Task Logout()
    {
        if (AuthStateProvider is LocalAuthStateProvider local)
            await local.MarkUserAsLoggedOut();

        Navigation.NavigateTo("/login", true);
    }
    private bool _firstAfterRender = true;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _firstAfterRender && AuthProv is LocalAuthStateProvider appProv)
        {
            // artık gerçek browser ortamındayız, localStorage çalışır
            await appProv.GetAuthenticationStateAsync();
            _firstAfterRender = false;
            StateHasChanged();
        }
    }
    private bool _alreadyLoggedIn;
    private bool _checking = true;
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         // Prerender bitti, gerçek tarayıcı ortamında çalışacak.
    //         if (await LocalStorage.ContainKeyAsync("appUserId"))
    //         {
    //             var id = await LocalStorage.GetItemAsync<int>("appUserId");
    //             if (id > 0)
    //             {
    //                 _alreadyLoggedIn = true;
    //                 StateHasChanged();
    //                 // ağaçtan kurtulup anasayfaya at:
                   
    //                 return;
    //             }
    //         }
    //         _checking = false;
    //         StateHasChanged();
    //     }
    // }
}